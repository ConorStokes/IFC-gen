using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Antlr4.Runtime.Misc;
using IFC4.Generators;

namespace Express
{
	public class ExpressListener : ExpressBaseListener
	{
		private StringBuilder stringBuilder;

		private ILanguageGenerator generator;

		private Dictionary<string,TypeData> typeGraph = new Dictionary<string,TypeData>();

		private TypeData currTypeData;

		private List<AttributeData> currAttrDatas = new List<AttributeData>();

		public ExpressListener(ILanguageGenerator generator, StringBuilder stringBuilder)
		{
			this.stringBuilder = stringBuilder;
			this.generator = generator;
		}

		public override void EnterSchemaDecl(ExpressParser.SchemaDeclContext context)
		{
			var outer =
            @"/*
This code was generated by a tool. DO NOT MODIFY this code manually, unless you really know what you are doing.
 */
using System;
using System.ComponentModel;
using System.Collections.Generic;
using Newtonsoft.Json;
using System.Linq;
using STEPExtensions;
	
namespace IFC4
{
	public abstract class BaseIfc
	{
		[JsonProperty(""id"")]
		public Guid Id{get;set;}

		public BaseIfc()
		{
			Id = Guid.NewGuid();
		}

		public virtual string ToJSON()
		{
			var settings = new JsonSerializerSettings()
			{
				Formatting = Formatting.Indented,
				TypeNameHandling = TypeNameHandling.Objects
			};
			return JsonConvert.SerializeObject(this);
		}

        public virtual string STEPParameters(ref Dictionary<Guid, int> indexDictionnary)
        {
            return """";
        }

        public virtual string ToSTEP(ref Dictionary<Guid, int> indexDictionnary)
        {
            return string.Format(""{0} = {1}({2});\r\n"",
                STEPValue(ref indexDictionnary),
                this.GetType().Name.ToUpper(),
                this.STEPParameters(ref indexDictionnary));
        }

        public virtual string STEPValue(ref Dictionary<Guid, int> indexDictionnary)
        {
            if (indexDictionnary.ContainsKey(Id))
            {
                return ""#"" + indexDictionnary[Id].ToString();
            }
            else
            {
                if (indexDictionnary.Count == 0)
                {
                    indexDictionnary.Add(Id, 1);
                    return ""#1"";
                }
                int index = indexDictionnary.Values.Last() + 1;
                indexDictionnary.Add(Id, index);
                return ""#"" + index.ToString();
            }
        }
    }

	public abstract class Select : BaseIfc
	{
		[JsonProperty(""value"")]
		public dynamic Value {get;protected set;}
	}

	/// <summary>
	/// A type wrapper for IFC.
	/// </summary>
	public class IfcType<T> : BaseIfc
	{
		[JsonProperty(""value"")]
		public T Value{get;set;}
		public IfcType(T value)
		{
			Value = value;
		}

		public static implicit operator IfcType<T>(T value)
		{
			return new IfcType<T>(value);
		}
	}
	";
			stringBuilder.AppendLine(outer);
		}

		public override void ExitSchemaDecl(ExpressParser.SchemaDeclContext context)
		{	
			// Set the IsRelationshipReference on all attribute data.
			foreach(var td in typeGraph.Values.Where(td=>td is Entity).Cast<Entity>())
			{
				if(!td.Subs.Any())
				{
					continue;
				}
			}

			// Write all the entities
			foreach(var kvp in typeGraph)
			{
				var td = kvp.Value;
				stringBuilder.AppendLine(td.ToString());
			}

			// Close the main namespace.
			stringBuilder.AppendLine("}");
		}

		public override void EnterTypeBody(ExpressParser.TypeBodyContext context)
		{
			var name = context.typeDef().SimpleId().GetText();

			TypeData td = null;
			if(context.typeSel().collectionType() != null)
			{
				td = new SimpleType(name, generator);
				((SimpleType)td).IsCollectionType = true;
			}
			else if(context.typeSel().simpleType() != null)
			{
				td = new SimpleType(name, generator);
				// The wrapped type will be discerned on exit so we can 
				// get it for collection types as well.
			}
			else if(context.typeSel().namedType() != null)
			{
				td = new SimpleType(name, generator);
				// The wrapped type will be discerned on exit so we can 
				// get it for collection types as well.
			}
			else if(context.typeSel().enumType() != null)
			{
				td = new EnumType(name, generator);
				((EnumType)td).Values = context.typeSel().enumType().enumValues().GetText().Split(',');
			}
			else if(context.typeSel().selectType() != null)
			{
				td = new SelectType(name, generator);
				((SelectType)td).Values = context.typeSel().selectType().selectValues().GetText().Split(',');
			}

			currTypeData = td;
			typeGraph.Add(name, td);
		}

		public override void ExitSimpleType(ExpressParser.SimpleTypeContext context)
		{
			if(currTypeData is SimpleType)
			{
				((SimpleType)currTypeData).WrappedType = ParseSimpleType(context);
			}
			else if(currTypeData is Entity)
			{
				foreach(var ad in currAttrDatas)
				{
					ad.Type = ParseSimpleType(context);
				}
			}
		}

		public override void ExitNamedType(ExpressParser.NamedTypeContext context)
		{
			string t = null;
			if(context.typeRef() != null)
			{
				t = context.typeRef().SimpleId().GetText();
			}
			else if(context.entityRef() != null)
			{
				t = context.entityRef().SimpleId().GetText();
			}

			if(currTypeData is SimpleType)
			{
				((SimpleType)currTypeData).WrappedType = t;
			}
			else if(currTypeData is Entity)
			{
				foreach(var ad in currAttrDatas)
				{
					ad.Type = t;
				}
			}
		}

		public override void ExitTypeBody(ExpressParser.TypeBodyContext context)
		{
			currTypeData = null;
		}

		public override void EnterCollectionType(ExpressParser.CollectionTypeContext context)
		{
			if(context.Parent.Parent is ExpressParser.TypeBodyContext)
			{
				var simple = (SimpleType)currTypeData;
				simple.IsCollectionType = true;
				simple.Rank ++;
			}

			if(currAttrDatas.Any())
			{
				foreach(var ad in currAttrDatas)
				{
					ad.IsCollection = true;
					ad.Rank ++;
				}
			}
		}

		private string ParseSimpleType(ExpressParser.SimpleTypeContext context)
		{
			var type = string.Empty;
				if(context.binaryType() != null)
				{
					type = "byte[]";
				}
				else if(context.booleanType() != null)
				{
					type = "bool";
				}
				else if(context.integerType() != null)
				{
					type = "int";
				}
				else if(context.logicalType() != null)
				{
					type = "bool?";
				}
				else if(context.numberType() != null)
				{
					type = "double";
				}
				else if(context.realType() != null)
				{
					type = "double";
				}
				else if(context.stringType() != null)
				{
					type = "string";
				}
			return type;
		}

		public override void EnterEntityHead(ExpressParser.EntityHeadContext context)
		{
			var name = context.entityDef().SimpleId().GetText();

			if(typeGraph.ContainsKey(name))
			{
				currTypeData = (Entity)typeGraph[name];
			}
			else
			{
				currTypeData = new Entity(name, generator);
				typeGraph.Add(name, currTypeData);
			}
		}

		public override void EnterSupertypeDecl(ExpressParser.SupertypeDeclContext context)
		{
			((Entity)currTypeData).IsAbstract = context.ABSTRACT() != null;
			var factor = context.supertypeExpr().supertypeFactor();
			
			// IFC: Use choice only.
			if(factor[0].choice() != null)
			{
				foreach(var superRef in factor[0].choice().supertypeExpr())
				{
					var name = superRef.supertypeFactor()[0].entityRef().SimpleId().GetText();
					Entity tdSuper = null;
					if(typeGraph.ContainsKey(name))
					{
						tdSuper = (Entity)typeGraph[name];
					}
					else
					{
						tdSuper = new Entity(name, generator);
						typeGraph.Add(name, tdSuper);
					}
					((Entity)currTypeData).Supers.Add(tdSuper);
				}
			}
		}

		public override void EnterSubtypeDecl(ExpressParser.SubtypeDeclContext context)
		{
			foreach(var subRef in context.entityRef())
			{
				var name = subRef.SimpleId().GetText();
				Entity tdSub = null;
				if(typeGraph.ContainsKey(name))
				{
					tdSub = (Entity)typeGraph[name];
				}
				else
				{
					tdSub = new Entity(name, generator);
					typeGraph.Add(name, tdSub);
				}
				((Entity)currTypeData).Subs.Add(tdSub);
			}
		}

		public override void EnterExplDef(ExpressParser.ExplDefContext context)
		{
			var cad = new AttributeData(generator);
			cad.IsOptional = context.OPTIONAL() != null;
			currAttrDatas.Add(cad);
			((Entity)currTypeData).Attributes.Add(cad);
		}

		public override void EnterDeriveDef(ExpressParser.DeriveDefContext context)
		{
			var cad = new AttributeData(generator);
			cad.IsDerived = true;
			currAttrDatas.Add(cad);
			((Entity)currTypeData).Attributes.Add(cad);
		}

		public override void EnterInverseDef(ExpressParser.InverseDefContext context)
		{
			var cad = new AttributeData(generator);
			cad.IsInverse = true;
			currAttrDatas.Add(cad);
			((Entity)currTypeData).Attributes.Add(cad);
		}

		public override void EnterInverseType(ExpressParser.InverseTypeContext context){
			foreach(var ad in currAttrDatas)
			{
				ad.IsCollection = true;
				ad.Rank ++;
			}
		}

		public override void EnterEntityRef(ExpressParser.EntityRefContext context)
		{
			foreach(var ad in currAttrDatas){
				ad.Type = context.SimpleId().GetText();
			}
		}

		public override void EnterAttrDef(ExpressParser.AttrDefContext context)
		{
			if(context.SimpleId() != null)
			{
				currAttrDatas.Last().Name = context.SimpleId().GetText();
			}
			else if(context.Path() != null)
			{
				currAttrDatas.Last().Name = context.Path().GetText();
			}
		}

		public override void ExitExplDef(ExpressParser.ExplDefContext context)
		{
			currAttrDatas.Clear();
		}

		public override void ExitDeriveDef(ExpressParser.DeriveDefContext context)
		{
			currAttrDatas.Clear();
		}

		public override void ExitInverseDef(ExpressParser.InverseDefContext context)
		{
			currAttrDatas.Clear();
		}

		public override void ExitEntityDecl(ExpressParser.EntityDeclContext context)
		{
			currTypeData = null;
		}
	}
}