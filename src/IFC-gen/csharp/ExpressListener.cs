using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Antlr4.Runtime.Misc;

namespace Express
{
	public class ExpressListener : ExpressBaseListener
	{
		private int currRank = 0;

		private string currType;
		
		private StringBuilder stringBuilder;
		public ExpressListener(StringBuilder stringBuilder)
		{
			this.stringBuilder = stringBuilder;
		}

		public override void EnterSchemaDecl(ExpressParser.SchemaDeclContext context)
		{
			var outer =
			@"/*
This code was generated by a tool. DO NOT MODIFY this code manually, unless you really know what you are doing.
 */
using System;
using System.Collections.Generic;
using Newtonsoft.Json;
	
namespace IFC4
{
	public abstract class Select : IfcBase
	{
		[JsonProperty(""value"")]
		public dynamic Value {{get;protected set;}}
	}";
			stringBuilder.AppendLine(outer);
		}

		public override void ExitSchemaDecl(ExpressParser.SchemaDeclContext context)
		{
			// Close the main namespace.
			stringBuilder.AppendLine("}");
		}

		public override void ExitTypeBody(ExpressParser.TypeBodyContext context)
		{
			var name = context.typeDef().SimpleId().GetText();
			if(context.typeSel().collectionType() != null)
			{
				var ct = context.typeSel().collectionType();
				var optional = false;
				var unique = false;

				if(ct.arrayType() != null)
				{
					optional = ct.arrayType().OPTIONAL() != null;
					unique = ct.arrayType().UNIQUE() != null;
				}
				else if(ct.listType() != null)
				{
					unique = ct.listType().UNIQUE() != null;
				}
				
				// TODO use OPTIONAL and UNIQUE
				stringBuilder.AppendLine(WriteSimpleType(name, WriteCollection(currType, currRank)));
			}
			else if(context.typeSel().namedType() != null)
			{
				stringBuilder.AppendLine(WriteSimpleType(name, currType));
			}
			else if(context.typeSel().simpleType() != null)
			{
				stringBuilder.AppendLine(WriteSimpleType(name, currType));
			}
			else if(context.typeSel().enumType() != null)
			{
				var values = context.typeSel().enumType().enumValues().GetText().Split(',');
				stringBuilder.AppendLine(WriteEnum(name, values));
			}
			else if(context.typeSel().selectType() != null)
			{
				var values = context.typeSel().selectType().selectValues().GetText().Split(',');
				stringBuilder.AppendLine(WriteSelect(name, values));
			}
		}

		private string ParseSimpleType(ExpressParser.SimpleTypeContext context)
		{
			var type = string.Empty;
				if(context.binaryType() != null)
				{
					type = "BINARY";
				}
				else if(context.booleanType() != null)
				{
					type = "BOOLEAN";
				}
				else if(context.integerType() != null)
				{
					type = "INTEGER";
				}
				else if(context.logicalType() != null)
				{
					type = "LOGICAL";
				}
				else if(context.numberType() != null)
				{
					type = "NUMBER";
				}
				else if(context.realType() != null)
				{
					type = "REAL";
				}
				else if(context.stringType() != null)
				{
					type = "STRING";
				}
			return type;
		}

		public override void ExitNamedType(ExpressParser.NamedTypeContext context)
		{
			if(context.entityRef() != null)
			{
				currType = context.entityRef().SimpleId().GetText();
			}
			else if(context.typeRef() != null)
			{
				currType = context.typeRef().SimpleId().GetText();
			}
		}

		public override void ExitSimpleType(ExpressParser.SimpleTypeContext context)
		{
			currType = ParseSimpleType(context);
		}

		public override void EnterCollectionType(ExpressParser.CollectionTypeContext context)
		{
			currRank = 0;
		}

		public override void ExitCollectionType(ExpressParser.CollectionTypeContext context)
		{
			currRank = 0;
		}

		private string WriteSimpleType(string name, string type)
		{	
			var csharpType = IFCTypeToCSharpType(type);

			var result = 
	$@"	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/{name.ToLower()}.htm
	/// </summary>
	public class {name} : IfcType<{csharpType}>
	{{
		public {name}({csharpType} value):base(value){{}}	

		public static implicit operator {csharpType}({name} v)
		{{
			return v.Value;
		}}

		public static implicit operator {name}({csharpType} v)
		{{
			return new {name}(v);
		}}	

		public static {name} FromJSON(string json)
		{{
			return JsonConvert.DeserializeObject<{name}>(json);
		}}

		public static {name} FromSTEP(string step)
		{{
			throw new NotImplementedException();
		}}
	}}

";
			return result;
		}
		private string IFCTypeToCSharpType(string type)
		{
			var retType = type;

			switch(type)
			{
				case "BINARY":
					retType = "byte[]";
					break;
				case "BOOLEAN":
					retType = "bool";
					break;
				case "LOGICAL":
					retType = "bool?";
					break;
				case "REAL":
					retType = "double";
					break;
				case "STRING":
					retType = "string";
					break;
				case "INTEGER":
					retType = "int";
					break;
				case "NUMBER":
					retType = "double";
					break;
				default:
					retType = type;
					break;
			}
			return retType;
		}

		private string WriteCollection(string type, int rank)
		{
			return $"{string.Join("",Enumerable.Repeat("List<",rank))}{type}{string.Join("",Enumerable.Repeat(">",rank))}";
		}

		private string WriteEnum(string name, IEnumerable<string> values)
		{
var result = 
	$@"	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/{name.ToLower()}.htm
	/// </summary>
	public enum {name} {{{string.Join(",",values)}}}

";
			return result;
		}

		private string WriteSelect(string name, IEnumerable<string> values)
		{
			var constructors = new StringBuilder();
			foreach(var value in values)
			{
				constructors.AppendLine($"\t\tpublic {name}({value} value):base(value){{}}");
			}
			var result = 
	$@"	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/{name.ToLower()}.htm
	/// </summary>
	public class {name} : IfcSelect<{string.Join(",",values)}>
	{{
{constructors}
		public static {name} FromJSON(string json)
		{{
			return JsonConvert.DeserializeObject<{name}>(json);
		}}

		public static {name} FromSTEP(string step)
		{{
			throw new NotImplementedException();
		}}
	}}

";

			return result;
		}

		public override void EnterBagType(ExpressParser.BagTypeContext context)
		{
			currRank ++;
		}

		public override void EnterArrayType(ExpressParser.ArrayTypeContext context)
		{
			currRank ++;
		}

		public override void EnterSetType(ExpressParser.SetTypeContext context)
		{
			currRank ++;
		}

		public override void EnterListType(ExpressParser.ListTypeContext context)
		{
			currRank ++;
		}
	}
}