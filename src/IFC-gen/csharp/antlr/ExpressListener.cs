//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Express.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Express {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="ExpressParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public interface IExpressListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.schemaDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSchemaDeclaration([NotNull] ExpressParser.SchemaDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.schemaDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSchemaDeclaration([NotNull] ExpressParser.SchemaDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.typeDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeDeclaration([NotNull] ExpressParser.TypeDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.typeDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeDeclaration([NotNull] ExpressParser.TypeDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.typeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeName([NotNull] ExpressParser.TypeNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.typeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeName([NotNull] ExpressParser.TypeNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.valueType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValueType([NotNull] ExpressParser.ValueTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.valueType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValueType([NotNull] ExpressParser.ValueTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.collectionValueType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCollectionValueType([NotNull] ExpressParser.CollectionValueTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.collectionValueType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCollectionValueType([NotNull] ExpressParser.CollectionValueTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>array</c>
	/// labeled alternative in <see cref="ExpressParser.collectionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArray([NotNull] ExpressParser.ArrayContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>array</c>
	/// labeled alternative in <see cref="ExpressParser.collectionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArray([NotNull] ExpressParser.ArrayContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>set</c>
	/// labeled alternative in <see cref="ExpressParser.collectionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSet([NotNull] ExpressParser.SetContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>set</c>
	/// labeled alternative in <see cref="ExpressParser.collectionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSet([NotNull] ExpressParser.SetContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>list</c>
	/// labeled alternative in <see cref="ExpressParser.collectionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterList([NotNull] ExpressParser.ListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>list</c>
	/// labeled alternative in <see cref="ExpressParser.collectionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitList([NotNull] ExpressParser.ListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>arrayOfArray</c>
	/// labeled alternative in <see cref="ExpressParser.collectionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayOfArray([NotNull] ExpressParser.ArrayOfArrayContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>arrayOfArray</c>
	/// labeled alternative in <see cref="ExpressParser.collectionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayOfArray([NotNull] ExpressParser.ArrayOfArrayContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>setOfSets</c>
	/// labeled alternative in <see cref="ExpressParser.collectionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetOfSets([NotNull] ExpressParser.SetOfSetsContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>setOfSets</c>
	/// labeled alternative in <see cref="ExpressParser.collectionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetOfSets([NotNull] ExpressParser.SetOfSetsContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>listOfLists</c>
	/// labeled alternative in <see cref="ExpressParser.collectionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterListOfLists([NotNull] ExpressParser.ListOfListsContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>listOfLists</c>
	/// labeled alternative in <see cref="ExpressParser.collectionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitListOfLists([NotNull] ExpressParser.ListOfListsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.setParameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetParameters([NotNull] ExpressParser.SetParametersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.setParameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetParameters([NotNull] ExpressParser.SetParametersContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.setSize"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetSize([NotNull] ExpressParser.SetSizeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.setSize"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetSize([NotNull] ExpressParser.SetSizeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.enumeration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumeration([NotNull] ExpressParser.EnumerationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.enumeration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumeration([NotNull] ExpressParser.EnumerationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.select"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelect([NotNull] ExpressParser.SelectContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.select"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelect([NotNull] ExpressParser.SelectContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.idList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdList([NotNull] ExpressParser.IdListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.idList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdList([NotNull] ExpressParser.IdListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.typeDeclarationBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeDeclarationBody([NotNull] ExpressParser.TypeDeclarationBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.typeDeclarationBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeDeclarationBody([NotNull] ExpressParser.TypeDeclarationBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.ruleDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRuleDeclaration([NotNull] ExpressParser.RuleDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.ruleDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRuleDeclaration([NotNull] ExpressParser.RuleDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.rule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRule([NotNull] ExpressParser.RuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.rule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRule([NotNull] ExpressParser.RuleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr([NotNull] ExpressParser.ExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr([NotNull] ExpressParser.ExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtom([NotNull] ExpressParser.AtomContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtom([NotNull] ExpressParser.AtomContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.boolExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolExpr([NotNull] ExpressParser.BoolExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.boolExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolExpr([NotNull] ExpressParser.BoolExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.funcCallExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncCallExpr([NotNull] ExpressParser.FuncCallExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.funcCallExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncCallExpr([NotNull] ExpressParser.FuncCallExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.funcParameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncParameters([NotNull] ExpressParser.FuncParametersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.funcParameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncParameters([NotNull] ExpressParser.FuncParametersContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.queryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQueryExpr([NotNull] ExpressParser.QueryExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.queryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQueryExpr([NotNull] ExpressParser.QueryExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.mulDivExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMulDivExpr([NotNull] ExpressParser.MulDivExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.mulDivExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMulDivExpr([NotNull] ExpressParser.MulDivExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.addSubExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddSubExpr([NotNull] ExpressParser.AddSubExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.addSubExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddSubExpr([NotNull] ExpressParser.AddSubExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.entityDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEntityDeclaration([NotNull] ExpressParser.EntityDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.entityDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEntityDeclaration([NotNull] ExpressParser.EntityDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.entityDeclarationBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEntityDeclarationBody([NotNull] ExpressParser.EntityDeclarationBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.entityDeclarationBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEntityDeclarationBody([NotNull] ExpressParser.EntityDeclarationBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>supertype</c>
	/// labeled alternative in <see cref="ExpressParser.supertypeDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSupertype([NotNull] ExpressParser.SupertypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>supertype</c>
	/// labeled alternative in <see cref="ExpressParser.supertypeDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSupertype([NotNull] ExpressParser.SupertypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>supertypes</c>
	/// labeled alternative in <see cref="ExpressParser.supertypeDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSupertypes([NotNull] ExpressParser.SupertypesContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>supertypes</c>
	/// labeled alternative in <see cref="ExpressParser.supertypeDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSupertypes([NotNull] ExpressParser.SupertypesContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>subtype</c>
	/// labeled alternative in <see cref="ExpressParser.subtypeDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubtype([NotNull] ExpressParser.SubtypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>subtype</c>
	/// labeled alternative in <see cref="ExpressParser.subtypeDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubtype([NotNull] ExpressParser.SubtypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>subtypes</c>
	/// labeled alternative in <see cref="ExpressParser.subtypeDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubtypes([NotNull] ExpressParser.SubtypesContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>subtypes</c>
	/// labeled alternative in <see cref="ExpressParser.subtypeDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubtypes([NotNull] ExpressParser.SubtypesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttribute([NotNull] ExpressParser.AttributeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttribute([NotNull] ExpressParser.AttributeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.optional"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOptional([NotNull] ExpressParser.OptionalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.optional"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOptional([NotNull] ExpressParser.OptionalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.definition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDefinition([NotNull] ExpressParser.DefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.definition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDefinition([NotNull] ExpressParser.DefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.oneOf"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOneOf([NotNull] ExpressParser.OneOfContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.oneOf"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOneOf([NotNull] ExpressParser.OneOfContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.inverseDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInverseDeclaration([NotNull] ExpressParser.InverseDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.inverseDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInverseDeclaration([NotNull] ExpressParser.InverseDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.inverseExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInverseExpression([NotNull] ExpressParser.InverseExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.inverseExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInverseExpression([NotNull] ExpressParser.InverseExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.deriveDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeriveDeclaration([NotNull] ExpressParser.DeriveDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.deriveDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeriveDeclaration([NotNull] ExpressParser.DeriveDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.uniqueDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUniqueDeclaration([NotNull] ExpressParser.UniqueDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.uniqueDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUniqueDeclaration([NotNull] ExpressParser.UniqueDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.uniqueStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUniqueStatement([NotNull] ExpressParser.UniqueStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.uniqueStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUniqueStatement([NotNull] ExpressParser.UniqueStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDeclaration([NotNull] ExpressParser.FunctionDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDeclaration([NotNull] ExpressParser.FunctionDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.functionDeclarationBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDeclarationBody([NotNull] ExpressParser.FunctionDeclarationBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.functionDeclarationBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDeclarationBody([NotNull] ExpressParser.FunctionDeclarationBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.path"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPath([NotNull] ExpressParser.PathContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.path"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPath([NotNull] ExpressParser.PathContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.propertyAccessor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropertyAccessor([NotNull] ExpressParser.PropertyAccessorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.propertyAccessor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropertyAccessor([NotNull] ExpressParser.PropertyAccessorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.setAccessor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetAccessor([NotNull] ExpressParser.SetAccessorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.setAccessor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetAccessor([NotNull] ExpressParser.SetAccessorContext context);
}
} // namespace Express
