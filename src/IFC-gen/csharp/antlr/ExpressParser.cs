//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Express.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Express {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class ExpressParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		BINARY_SIZED=10, BOOLEAN=11, INTEGER=12, LIST=13, LOGICAL=14, REAL=15, 
		SET=16, STRING_SIZED=17, FIXED=18, STRING=19, ARRAY=20, ABSTRACT=21, AND=22, 
		DERIVE=23, ENTITY=24, END_ENTITY=25, ENUMERATION=26, FOR=27, IN=28, INVERSE=29, 
		MOD=30, OF=31, ONEOF=32, OPTIONAL=33, OR=34, SCHEMA=35, END_SCHEMA=36, 
		SELECT=37, SELF=38, SUBTYPE=39, SUPERTYPE=40, TYPE=41, END_TYPE=42, UNIQUE=43, 
		WHERE=44, XOR=45, EXISTS=46, SIZEOF=47, QUERY=48, TYPEOF=49, ABS=50, USEDIN=51, 
		IfcType=52, Version=53, Integer=54, LP=55, RP=56, LB=57, RB=58, COLON=59, 
		PIPE=60, NOT=61, EQ=62, GT=63, LT=64, GTE=65, LTE=66, NEQ=67, MUL=68, 
		DIV=69, ADD=70, SUB=71, DEF=72, SAME=73, NOT_SAME=74, INIT=75, LAND=76, 
		LOR=77, Scientific=78, Float=79, Identifier=80, Rules=81, Functions=82, 
		WS=83, Comments=84;
	public const int
		RULE_schemaDeclaration = 0, RULE_typeDeclaration = 1, RULE_typeName = 2, 
		RULE_valueType = 3, RULE_collectionValueType = 4, RULE_collectionDeclaration = 5, 
		RULE_setParameters = 6, RULE_enumeration = 7, RULE_select = 8, RULE_idList = 9, 
		RULE_typeDeclarationBody = 10, RULE_ruleDeclaration = 11, RULE_rule = 12, 
		RULE_expr = 13, RULE_atom = 14, RULE_boolExpr = 15, RULE_funcCallExpr = 16, 
		RULE_funcParameters = 17, RULE_queryExpr = 18, RULE_mulDivExpr = 19, RULE_addSubExpr = 20, 
		RULE_entityDeclaration = 21, RULE_entityDeclarationBody = 22, RULE_supertypeDeclaration = 23, 
		RULE_subtypeDeclaration = 24, RULE_attribute = 25, RULE_optional = 26, 
		RULE_definition = 27, RULE_oneOf = 28, RULE_inverseDeclaration = 29, RULE_inverseAttribute = 30, 
		RULE_deriveDeclaration = 31, RULE_uniqueDeclaration = 32, RULE_uniqueStatement = 33, 
		RULE_functionDeclaration = 34, RULE_functionDeclarationBody = 35, RULE_path = 36, 
		RULE_propertyAccessor = 37, RULE_setAccessor = 38;
	public static readonly string[] ruleNames = {
		"schemaDeclaration", "typeDeclaration", "typeName", "valueType", "collectionValueType", 
		"collectionDeclaration", "setParameters", "enumeration", "select", "idList", 
		"typeDeclarationBody", "ruleDeclaration", "rule", "expr", "atom", "boolExpr", 
		"funcCallExpr", "funcParameters", "queryExpr", "mulDivExpr", "addSubExpr", 
		"entityDeclaration", "entityDeclarationBody", "supertypeDeclaration", 
		"subtypeDeclaration", "attribute", "optional", "definition", "oneOf", 
		"inverseDeclaration", "inverseAttribute", "deriveDeclaration", "uniqueDeclaration", 
		"uniqueStatement", "functionDeclaration", "functionDeclarationBody", "path", 
		"propertyAccessor", "setAccessor"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'['", "'?'", "']'", "','", "'FUNCTION'", "'END_FUNCTION'", 
		"'\\'", "'.'", null, "'BOOLEAN'", "'INTEGER'", "'LIST'", "'LOGICAL'", 
		"'REAL'", "'SET'", null, "'FIXED'", "'STRING'", "'ARRAY'", "'ABSTRACT'", 
		"'AND'", "'DERIVE'", "'ENTITY'", "'END_ENTITY'", "'ENUMERATION'", "'FOR'", 
		"'IN'", "'INVERSE'", "'MOD'", "'OF'", "'ONEOF'", "'OPTIONAL'", "'OR'", 
		"'SCHEMA'", "'END_SCHEMA'", "'SELECT'", "'SELF'", "'SUBTYPE'", "'SUPERTYPE'", 
		"'TYPE'", "'END_TYPE'", "'UNIQUE'", "'WHERE'", "'XOR'", "'EXISTS'", "'SIZEOF'", 
		"'QUERY'", "'TYPEOF'", "'ABS'", "'USEDIN'", null, null, null, "'('", "')'", 
		"'{'", "'}'", "':'", "'|'", "'NOT'", "'='", "'>'", "'<'", "'>='", "'<='", 
		"'<>'", "'*'", "'/'", "'+'", "'-'", "':='", "':=:'", "':<>:'", "'<*'", 
		"'&&'", "'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "BINARY_SIZED", 
		"BOOLEAN", "INTEGER", "LIST", "LOGICAL", "REAL", "SET", "STRING_SIZED", 
		"FIXED", "STRING", "ARRAY", "ABSTRACT", "AND", "DERIVE", "ENTITY", "END_ENTITY", 
		"ENUMERATION", "FOR", "IN", "INVERSE", "MOD", "OF", "ONEOF", "OPTIONAL", 
		"OR", "SCHEMA", "END_SCHEMA", "SELECT", "SELF", "SUBTYPE", "SUPERTYPE", 
		"TYPE", "END_TYPE", "UNIQUE", "WHERE", "XOR", "EXISTS", "SIZEOF", "QUERY", 
		"TYPEOF", "ABS", "USEDIN", "IfcType", "Version", "Integer", "LP", "RP", 
		"LB", "RB", "COLON", "PIPE", "NOT", "EQ", "GT", "LT", "GTE", "LTE", "NEQ", 
		"MUL", "DIV", "ADD", "SUB", "DEF", "SAME", "NOT_SAME", "INIT", "LAND", 
		"LOR", "Scientific", "Float", "Identifier", "Rules", "Functions", "WS", 
		"Comments"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Express.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExpressParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExpressParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExpressParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class SchemaDeclarationContext : ParserRuleContext {
		public ITerminalNode SCHEMA() { return GetToken(ExpressParser.SCHEMA, 0); }
		public ITerminalNode Version() { return GetToken(ExpressParser.Version, 0); }
		public ITerminalNode END_SCHEMA() { return GetToken(ExpressParser.END_SCHEMA, 0); }
		public ITerminalNode Eof() { return GetToken(ExpressParser.Eof, 0); }
		public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public EntityDeclarationContext[] entityDeclaration() {
			return GetRuleContexts<EntityDeclarationContext>();
		}
		public EntityDeclarationContext entityDeclaration(int i) {
			return GetRuleContext<EntityDeclarationContext>(i);
		}
		public FunctionDeclarationContext[] functionDeclaration() {
			return GetRuleContexts<FunctionDeclarationContext>();
		}
		public FunctionDeclarationContext functionDeclaration(int i) {
			return GetRuleContext<FunctionDeclarationContext>(i);
		}
		public SchemaDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSchemaDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSchemaDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public SchemaDeclarationContext schemaDeclaration() {
		SchemaDeclarationContext _localctx = new SchemaDeclarationContext(Context, State);
		EnterRule(_localctx, 0, RULE_schemaDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; Match(SCHEMA);
			State = 79; Match(Version);
			State = 80; Match(T__0);
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TYPE) {
				{
				{
				State = 81; typeDeclaration();
				}
				}
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ENTITY) {
				{
				{
				State = 87; entityDeclaration();
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 93; functionDeclaration();
				}
				}
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 99; Match(END_SCHEMA);
			State = 100; Match(T__0);
			State = 101; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(ExpressParser.TYPE, 0); }
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public ITerminalNode EQ() { return GetToken(ExpressParser.EQ, 0); }
		public ITerminalNode END_TYPE() { return GetToken(ExpressParser.END_TYPE, 0); }
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public EnumerationContext enumeration() {
			return GetRuleContext<EnumerationContext>(0);
		}
		public ITerminalNode FIXED() { return GetToken(ExpressParser.FIXED, 0); }
		public TypeDeclarationBodyContext typeDeclarationBody() {
			return GetRuleContext<TypeDeclarationBodyContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_typeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; Match(TYPE);
			State = 104; Match(Identifier);
			State = 105; Match(EQ);
			State = 109;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 106; valueType();
				}
				break;
			case 2:
				{
				State = 107; enumeration();
				}
				break;
			case 3:
				{
				}
				break;
			}
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FIXED) {
				{
				State = 111; Match(FIXED);
				}
			}

			State = 114; Match(T__0);
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 115; typeDeclarationBody();
				}
			}

			State = 118; Match(END_TYPE);
			State = 119; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_typeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueTypeContext : ParserRuleContext {
		public ITerminalNode BINARY_SIZED() { return GetToken(ExpressParser.BINARY_SIZED, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(ExpressParser.BOOLEAN, 0); }
		public ITerminalNode INTEGER() { return GetToken(ExpressParser.INTEGER, 0); }
		public ITerminalNode LOGICAL() { return GetToken(ExpressParser.LOGICAL, 0); }
		public ITerminalNode REAL() { return GetToken(ExpressParser.REAL, 0); }
		public ITerminalNode STRING() { return GetToken(ExpressParser.STRING, 0); }
		public ITerminalNode STRING_SIZED() { return GetToken(ExpressParser.STRING_SIZED, 0); }
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public EnumerationContext enumeration() {
			return GetRuleContext<EnumerationContext>(0);
		}
		public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		public CollectionDeclarationContext collectionDeclaration() {
			return GetRuleContext<CollectionDeclarationContext>(0);
		}
		public ValueTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterValueType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitValueType(this);
		}
	}

	[RuleVersion(0)]
	public ValueTypeContext valueType() {
		ValueTypeContext _localctx = new ValueTypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_valueType);
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINARY_SIZED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 123; Match(BINARY_SIZED);
				}
				break;
			case BOOLEAN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 124; Match(BOOLEAN);
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 125; Match(INTEGER);
				}
				break;
			case LOGICAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 126; Match(LOGICAL);
				}
				break;
			case REAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 127; Match(REAL);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 6);
				{
				State = 128; Match(STRING);
				}
				break;
			case STRING_SIZED:
				EnterOuterAlt(_localctx, 7);
				{
				State = 129; Match(STRING_SIZED);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 8);
				{
				State = 130; Match(Identifier);
				}
				break;
			case ENUMERATION:
				EnterOuterAlt(_localctx, 9);
				{
				State = 131; enumeration();
				}
				break;
			case SELECT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 132; select();
				}
				break;
			case LIST:
			case SET:
			case ARRAY:
				EnterOuterAlt(_localctx, 11);
				{
				State = 133; collectionDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionValueTypeContext : ParserRuleContext {
		public ITerminalNode BINARY_SIZED() { return GetToken(ExpressParser.BINARY_SIZED, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(ExpressParser.BOOLEAN, 0); }
		public ITerminalNode INTEGER() { return GetToken(ExpressParser.INTEGER, 0); }
		public ITerminalNode LOGICAL() { return GetToken(ExpressParser.LOGICAL, 0); }
		public ITerminalNode REAL() { return GetToken(ExpressParser.REAL, 0); }
		public ITerminalNode STRING() { return GetToken(ExpressParser.STRING, 0); }
		public ITerminalNode STRING_SIZED() { return GetToken(ExpressParser.STRING_SIZED, 0); }
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public CollectionValueTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionValueType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterCollectionValueType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitCollectionValueType(this);
		}
	}

	[RuleVersion(0)]
	public CollectionValueTypeContext collectionValueType() {
		CollectionValueTypeContext _localctx = new CollectionValueTypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_collectionValueType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BINARY_SIZED) | (1L << BOOLEAN) | (1L << INTEGER) | (1L << LOGICAL) | (1L << REAL) | (1L << STRING_SIZED) | (1L << STRING))) != 0) || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionDeclarationContext : ParserRuleContext {
		public CollectionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionDeclaration; } }
	 
		public CollectionDeclarationContext() { }
		public virtual void CopyFrom(CollectionDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ListDeclContext : CollectionDeclarationContext {
		public ITerminalNode LIST() { return GetToken(ExpressParser.LIST, 0); }
		public SetParametersContext setParameters() {
			return GetRuleContext<SetParametersContext>(0);
		}
		public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		public CollectionValueTypeContext collectionValueType() {
			return GetRuleContext<CollectionValueTypeContext>(0);
		}
		public ITerminalNode UNIQUE() { return GetToken(ExpressParser.UNIQUE, 0); }
		public ListDeclContext(CollectionDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterListDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitListDecl(this);
		}
	}
	public partial class ArrayOfArrayDeclContext : CollectionDeclarationContext {
		public ITerminalNode[] ARRAY() { return GetTokens(ExpressParser.ARRAY); }
		public ITerminalNode ARRAY(int i) {
			return GetToken(ExpressParser.ARRAY, i);
		}
		public SetParametersContext[] setParameters() {
			return GetRuleContexts<SetParametersContext>();
		}
		public SetParametersContext setParameters(int i) {
			return GetRuleContext<SetParametersContext>(i);
		}
		public ITerminalNode[] OF() { return GetTokens(ExpressParser.OF); }
		public ITerminalNode OF(int i) {
			return GetToken(ExpressParser.OF, i);
		}
		public CollectionValueTypeContext collectionValueType() {
			return GetRuleContext<CollectionValueTypeContext>(0);
		}
		public ArrayOfArrayDeclContext(CollectionDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterArrayOfArrayDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitArrayOfArrayDecl(this);
		}
	}
	public partial class ListOfListsDeclContext : CollectionDeclarationContext {
		public ITerminalNode[] LIST() { return GetTokens(ExpressParser.LIST); }
		public ITerminalNode LIST(int i) {
			return GetToken(ExpressParser.LIST, i);
		}
		public SetParametersContext[] setParameters() {
			return GetRuleContexts<SetParametersContext>();
		}
		public SetParametersContext setParameters(int i) {
			return GetRuleContext<SetParametersContext>(i);
		}
		public ITerminalNode[] OF() { return GetTokens(ExpressParser.OF); }
		public ITerminalNode OF(int i) {
			return GetToken(ExpressParser.OF, i);
		}
		public CollectionValueTypeContext collectionValueType() {
			return GetRuleContext<CollectionValueTypeContext>(0);
		}
		public ITerminalNode[] UNIQUE() { return GetTokens(ExpressParser.UNIQUE); }
		public ITerminalNode UNIQUE(int i) {
			return GetToken(ExpressParser.UNIQUE, i);
		}
		public ListOfListsDeclContext(CollectionDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterListOfListsDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitListOfListsDecl(this);
		}
	}
	public partial class SetOfSetsDeclContext : CollectionDeclarationContext {
		public ITerminalNode[] SET() { return GetTokens(ExpressParser.SET); }
		public ITerminalNode SET(int i) {
			return GetToken(ExpressParser.SET, i);
		}
		public SetParametersContext[] setParameters() {
			return GetRuleContexts<SetParametersContext>();
		}
		public SetParametersContext setParameters(int i) {
			return GetRuleContext<SetParametersContext>(i);
		}
		public ITerminalNode[] OF() { return GetTokens(ExpressParser.OF); }
		public ITerminalNode OF(int i) {
			return GetToken(ExpressParser.OF, i);
		}
		public CollectionValueTypeContext collectionValueType() {
			return GetRuleContext<CollectionValueTypeContext>(0);
		}
		public SetOfSetsDeclContext(CollectionDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSetOfSetsDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSetOfSetsDecl(this);
		}
	}
	public partial class SetDeclContext : CollectionDeclarationContext {
		public ITerminalNode SET() { return GetToken(ExpressParser.SET, 0); }
		public SetParametersContext setParameters() {
			return GetRuleContext<SetParametersContext>(0);
		}
		public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		public CollectionValueTypeContext collectionValueType() {
			return GetRuleContext<CollectionValueTypeContext>(0);
		}
		public ITerminalNode UNIQUE() { return GetToken(ExpressParser.UNIQUE, 0); }
		public SetDeclContext(CollectionDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSetDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSetDecl(this);
		}
	}
	public partial class ArrayDeclContext : CollectionDeclarationContext {
		public ITerminalNode ARRAY() { return GetToken(ExpressParser.ARRAY, 0); }
		public SetParametersContext setParameters() {
			return GetRuleContext<SetParametersContext>(0);
		}
		public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		public CollectionValueTypeContext collectionValueType() {
			return GetRuleContext<CollectionValueTypeContext>(0);
		}
		public ITerminalNode UNIQUE() { return GetToken(ExpressParser.UNIQUE, 0); }
		public ArrayDeclContext(CollectionDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterArrayDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitArrayDecl(this);
		}
	}

	[RuleVersion(0)]
	public CollectionDeclarationContext collectionDeclaration() {
		CollectionDeclarationContext _localctx = new CollectionDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_collectionDeclaration);
		int _la;
		try {
			int _alt;
			State = 201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				_localctx = new ArrayDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 138; Match(ARRAY);
				State = 139; setParameters();
				State = 140; Match(OF);
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNIQUE) {
					{
					State = 141; Match(UNIQUE);
					}
				}

				State = 144; collectionValueType();
				}
				break;
			case 2:
				_localctx = new SetDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 146; Match(SET);
				State = 147; setParameters();
				State = 148; Match(OF);
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNIQUE) {
					{
					State = 149; Match(UNIQUE);
					}
				}

				State = 152; collectionValueType();
				}
				break;
			case 3:
				_localctx = new ListDeclContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 154; Match(LIST);
				State = 155; setParameters();
				State = 156; Match(OF);
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNIQUE) {
					{
					State = 157; Match(UNIQUE);
					}
				}

				State = 160; collectionValueType();
				}
				break;
			case 4:
				_localctx = new ArrayOfArrayDeclContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 162; Match(ARRAY);
				State = 163; setParameters();
				State = 167;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 164; Match(OF);
						State = 165; Match(ARRAY);
						State = 166; setParameters();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 169;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 171; Match(OF);
				State = 172; collectionValueType();
				}
				break;
			case 5:
				_localctx = new SetOfSetsDeclContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 174; Match(SET);
				State = 175; setParameters();
				State = 179;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 176; Match(OF);
						State = 177; Match(SET);
						State = 178; setParameters();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 181;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 183; Match(OF);
				State = 184; collectionValueType();
				}
				break;
			case 6:
				_localctx = new ListOfListsDeclContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 186; Match(LIST);
				State = 187; setParameters();
				State = 194;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 188; Match(OF);
						State = 190;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==UNIQUE) {
							{
							State = 189; Match(UNIQUE);
							}
						}

						State = 192; Match(LIST);
						State = 193; setParameters();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 196;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 198; Match(OF);
				State = 199; collectionValueType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetParametersContext : ParserRuleContext {
		public ITerminalNode[] Integer() { return GetTokens(ExpressParser.Integer); }
		public ITerminalNode Integer(int i) {
			return GetToken(ExpressParser.Integer, i);
		}
		public ITerminalNode COLON() { return GetToken(ExpressParser.COLON, 0); }
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public SetParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSetParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSetParameters(this);
		}
	}

	[RuleVersion(0)]
	public SetParametersContext setParameters() {
		SetParametersContext _localctx = new SetParametersContext(Context, State);
		EnterRule(_localctx, 12, RULE_setParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; Match(T__1);
			State = 204; Match(Integer);
			State = 205; Match(COLON);
			State = 206;
			_la = TokenStream.LA(1);
			if ( !(_la==T__2 || _la==Integer || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 207; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationContext : ParserRuleContext {
		public ITerminalNode ENUMERATION() { return GetToken(ExpressParser.ENUMERATION, 0); }
		public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		public ITerminalNode LP() { return GetToken(ExpressParser.LP, 0); }
		public IdListContext idList() {
			return GetRuleContext<IdListContext>(0);
		}
		public ITerminalNode RP() { return GetToken(ExpressParser.RP, 0); }
		public EnumerationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterEnumeration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitEnumeration(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationContext enumeration() {
		EnumerationContext _localctx = new EnumerationContext(Context, State);
		EnterRule(_localctx, 14, RULE_enumeration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; Match(ENUMERATION);
			State = 210; Match(OF);
			State = 211; Match(LP);
			State = 212; idList();
			State = 213; Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(ExpressParser.SELECT, 0); }
		public ITerminalNode LP() { return GetToken(ExpressParser.LP, 0); }
		public IdListContext idList() {
			return GetRuleContext<IdListContext>(0);
		}
		public ITerminalNode RP() { return GetToken(ExpressParser.RP, 0); }
		public SelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSelect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSelect(this);
		}
	}

	[RuleVersion(0)]
	public SelectContext select() {
		SelectContext _localctx = new SelectContext(Context, State);
		EnterRule(_localctx, 16, RULE_select);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; Match(SELECT);
			State = 216; Match(LP);
			State = 217; idList();
			State = 218; Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdListContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(ExpressParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(ExpressParser.Identifier, i);
		}
		public ITerminalNode[] IfcType() { return GetTokens(ExpressParser.IfcType); }
		public ITerminalNode IfcType(int i) {
			return GetToken(ExpressParser.IfcType, i);
		}
		public IdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterIdList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitIdList(this);
		}
	}

	[RuleVersion(0)]
	public IdListContext idList() {
		IdListContext _localctx = new IdListContext(Context, State);
		EnterRule(_localctx, 18, RULE_idList);
		int _la;
		try {
			State = 236;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 220; Match(Identifier);
				State = 225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 221; Match(T__4);
					State = 222; Match(Identifier);
					}
					}
					State = 227;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case IfcType:
				EnterOuterAlt(_localctx, 2);
				{
				State = 228; Match(IfcType);
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 229; Match(T__4);
					State = 230; Match(IfcType);
					}
					}
					State = 235;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationBodyContext : ParserRuleContext {
		public RuleDeclarationContext ruleDeclaration() {
			return GetRuleContext<RuleDeclarationContext>(0);
		}
		public TypeDeclarationBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclarationBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterTypeDeclarationBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitTypeDeclarationBody(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationBodyContext typeDeclarationBody() {
		TypeDeclarationBodyContext _localctx = new TypeDeclarationBodyContext(Context, State);
		EnterRule(_localctx, 20, RULE_typeDeclarationBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238; ruleDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleDeclarationContext : ParserRuleContext {
		public RuleContext[] rule() {
			return GetRuleContexts<RuleContext>();
		}
		public RuleContext rule(int i) {
			return GetRuleContext<RuleContext>(i);
		}
		public RuleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterRuleDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitRuleDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public RuleDeclarationContext ruleDeclaration() {
		RuleDeclarationContext _localctx = new RuleDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_ruleDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; Match(WHERE);
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 241; rule();
				}
				}
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public ITerminalNode COLON() { return GetToken(ExpressParser.COLON, 0); }
		public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		public RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitRule(this);
		}
	}

	[RuleVersion(0)]
	public RuleContext rule() {
		RuleContext _localctx = new RuleContext(Context, State);
		EnterRule(_localctx, 24, RULE_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; Match(Identifier);
			State = 247; Match(COLON);
			State = 248; boolExpr();
			State = 249; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public FuncCallExprContext funcCallExpr() {
			return GetRuleContext<FuncCallExprContext>(0);
		}
		public MulDivExprContext mulDivExpr() {
			return GetRuleContext<MulDivExprContext>(0);
		}
		public AddSubExprContext addSubExpr() {
			return GetRuleContext<AddSubExprContext>(0);
		}
		public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 26, RULE_expr);
		try {
			State = 255;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 251; funcCallExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 252; mulDivExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 253; addSubExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 254; boolExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public ITerminalNode LP() { return GetToken(ExpressParser.LP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RP() { return GetToken(ExpressParser.RP, 0); }
		public ITerminalNode NOT() { return GetToken(ExpressParser.NOT, 0); }
		public ITerminalNode SELF() { return GetToken(ExpressParser.SELF, 0); }
		public ITerminalNode IfcType() { return GetToken(ExpressParser.IfcType, 0); }
		public ITerminalNode Integer() { return GetToken(ExpressParser.Integer, 0); }
		public ITerminalNode[] Float() { return GetTokens(ExpressParser.Float); }
		public ITerminalNode Float(int i) {
			return GetToken(ExpressParser.Float, i);
		}
		public ITerminalNode Scientific() { return GetToken(ExpressParser.Scientific, 0); }
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public PropertyAccessorContext propertyAccessor() {
			return GetRuleContext<PropertyAccessorContext>(0);
		}
		public SetAccessorContext setAccessor() {
			return GetRuleContext<SetAccessorContext>(0);
		}
		public IdListContext idList() {
			return GetRuleContext<IdListContext>(0);
		}
		public FuncCallExprContext[] funcCallExpr() {
			return GetRuleContexts<FuncCallExprContext>();
		}
		public FuncCallExprContext funcCallExpr(int i) {
			return GetRuleContext<FuncCallExprContext>(i);
		}
		public ITerminalNode[] LOR() { return GetTokens(ExpressParser.LOR); }
		public ITerminalNode LOR(int i) {
			return GetToken(ExpressParser.LOR, i);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 28, RULE_atom);
		int _la;
		try {
			State = 302;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 257; Match(LP);
				State = 259;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 258; Match(NOT);
					}
					break;
				}
				State = 261; expr();
				State = 262; Match(RP);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 264; Match(NOT);
					}
				}

				State = 267; Match(LP);
				State = 268; expr();
				State = 269; Match(RP);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 271; Match(SELF);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 272; Match(IfcType);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 273; Match(Integer);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 274; Match(Float);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 275; Match(Scientific);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 276; Match(Identifier);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 277; path();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 278; propertyAccessor();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 279; setAccessor();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 280; Match(T__1);
				State = 281; idList();
				State = 282; Match(T__3);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 284; Match(T__1);
				State = 285; Match(Float);
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 286; Match(T__4);
					State = 287; Match(Float);
					}
					}
					State = 290;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__4 );
				State = 292; Match(T__3);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 293; funcCallExpr();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 294; funcCallExpr();
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 295; Match(LOR);
					State = 296; funcCallExpr();
					}
					}
					State = 299;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LOR );
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 301; Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolExprContext : ParserRuleContext {
		public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		public ITerminalNode MOD() { return GetToken(ExpressParser.MOD, 0); }
		public ITerminalNode[] EQ() { return GetTokens(ExpressParser.EQ); }
		public ITerminalNode EQ(int i) {
			return GetToken(ExpressParser.EQ, i);
		}
		public ITerminalNode SIZEOF() { return GetToken(ExpressParser.SIZEOF, 0); }
		public ITerminalNode LP() { return GetToken(ExpressParser.LP, 0); }
		public MulDivExprContext[] mulDivExpr() {
			return GetRuleContexts<MulDivExprContext>();
		}
		public MulDivExprContext mulDivExpr(int i) {
			return GetRuleContext<MulDivExprContext>(i);
		}
		public ITerminalNode RP() { return GetToken(ExpressParser.RP, 0); }
		public ITerminalNode[] LT() { return GetTokens(ExpressParser.LT); }
		public ITerminalNode LT(int i) {
			return GetToken(ExpressParser.LT, i);
		}
		public ITerminalNode[] GT() { return GetTokens(ExpressParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(ExpressParser.GT, i);
		}
		public ITerminalNode[] LTE() { return GetTokens(ExpressParser.LTE); }
		public ITerminalNode LTE(int i) {
			return GetToken(ExpressParser.LTE, i);
		}
		public ITerminalNode[] GTE() { return GetTokens(ExpressParser.GTE); }
		public ITerminalNode GTE(int i) {
			return GetToken(ExpressParser.GTE, i);
		}
		public ITerminalNode NEQ() { return GetToken(ExpressParser.NEQ, 0); }
		public ITerminalNode[] SAME() { return GetTokens(ExpressParser.SAME); }
		public ITerminalNode SAME(int i) {
			return GetToken(ExpressParser.SAME, i);
		}
		public ITerminalNode[] NOT_SAME() { return GetTokens(ExpressParser.NOT_SAME); }
		public ITerminalNode NOT_SAME(int i) {
			return GetToken(ExpressParser.NOT_SAME, i);
		}
		public FuncCallExprContext[] funcCallExpr() {
			return GetRuleContexts<FuncCallExprContext>();
		}
		public FuncCallExprContext funcCallExpr(int i) {
			return GetRuleContext<FuncCallExprContext>(i);
		}
		public AddSubExprContext[] addSubExpr() {
			return GetRuleContexts<AddSubExprContext>();
		}
		public AddSubExprContext addSubExpr(int i) {
			return GetRuleContext<AddSubExprContext>(i);
		}
		public ITerminalNode LB() { return GetToken(ExpressParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(ExpressParser.RB, 0); }
		public ITerminalNode[] NOT() { return GetTokens(ExpressParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(ExpressParser.NOT, i);
		}
		public ITerminalNode[] AND() { return GetTokens(ExpressParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(ExpressParser.AND, i);
		}
		public ITerminalNode[] OR() { return GetTokens(ExpressParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(ExpressParser.OR, i);
		}
		public ITerminalNode[] XOR() { return GetTokens(ExpressParser.XOR); }
		public ITerminalNode XOR(int i) {
			return GetToken(ExpressParser.XOR, i);
		}
		public ITerminalNode IN() { return GetToken(ExpressParser.IN, 0); }
		public ITerminalNode IfcType() { return GetToken(ExpressParser.IfcType, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public PropertyAccessorContext[] propertyAccessor() {
			return GetRuleContexts<PropertyAccessorContext>();
		}
		public PropertyAccessorContext propertyAccessor(int i) {
			return GetRuleContext<PropertyAccessorContext>(i);
		}
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public ITerminalNode SELF() { return GetToken(ExpressParser.SELF, 0); }
		public IdListContext idList() {
			return GetRuleContext<IdListContext>(0);
		}
		public BoolExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterBoolExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitBoolExpr(this);
		}
	}

	[RuleVersion(0)]
	public BoolExprContext boolExpr() {
		BoolExprContext _localctx = new BoolExprContext(Context, State);
		EnterRule(_localctx, 30, RULE_boolExpr);
		int _la;
		try {
			State = 377;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 304; atom();
				State = 305; Match(MOD);
				State = 306; atom();
				State = 307; Match(EQ);
				State = 308; atom();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 310; Match(SIZEOF);
				State = 311; Match(LP);
				State = 312; mulDivExpr();
				State = 313; Match(RP);
				State = 314; Match(EQ);
				State = 315; atom();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 321;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 317; atom();
					}
					break;
				case 2:
					{
					State = 318; funcCallExpr();
					}
					break;
				case 3:
					{
					State = 319; mulDivExpr();
					}
					break;
				case 4:
					{
					State = 320; addSubExpr();
					}
					break;
				}
				State = 323;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & ((1L << (EQ - 62)) | (1L << (GT - 62)) | (1L << (LT - 62)) | (1L << (GTE - 62)) | (1L << (LTE - 62)) | (1L << (NEQ - 62)) | (1L << (SAME - 62)) | (1L << (NOT_SAME - 62)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 328;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 324; atom();
					}
					break;
				case 2:
					{
					State = 325; funcCallExpr();
					}
					break;
				case 3:
					{
					State = 326; mulDivExpr();
					}
					break;
				case 4:
					{
					State = 327; addSubExpr();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 330; Match(LB);
				State = 331; atom();
				State = 336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & ((1L << (EQ - 62)) | (1L << (GT - 62)) | (1L << (LT - 62)) | (1L << (GTE - 62)) | (1L << (LTE - 62)) | (1L << (SAME - 62)) | (1L << (NOT_SAME - 62)))) != 0)) {
					{
					{
					State = 332;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & ((1L << (EQ - 62)) | (1L << (GT - 62)) | (1L << (LT - 62)) | (1L << (GTE - 62)) | (1L << (LTE - 62)) | (1L << (SAME - 62)) | (1L << (NOT_SAME - 62)))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 333; atom();
					}
					}
					State = 338;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 339; Match(RB);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 342;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
				case 1:
					{
					State = 341; Match(NOT);
					}
					break;
				}
				State = 346;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 344; atom();
					}
					break;
				case 2:
					{
					State = 345; funcCallExpr();
					}
					break;
				}
				State = 358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << OR) | (1L << XOR))) != 0)) {
					{
					{
					State = 348;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << OR) | (1L << XOR))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 350;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
					case 1:
						{
						State = 349; Match(NOT);
						}
						break;
					}
					State = 354;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
					case 1:
						{
						State = 352; atom();
						}
						break;
					case 2:
						{
						State = 353; funcCallExpr();
						}
						break;
					}
					}
					}
					State = 360;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 366;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					State = 361; Match(IfcType);
					}
					break;
				case 2:
					{
					State = 362; path();
					}
					break;
				case 3:
					{
					State = 363; propertyAccessor();
					}
					break;
				case 4:
					{
					State = 364; Match(Identifier);
					}
					break;
				case 5:
					{
					State = 365; Match(SELF);
					}
					break;
				}
				State = 368; Match(IN);
				State = 375;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 369; funcCallExpr();
					}
					break;
				case 2:
					{
					State = 370; Match(T__1);
					State = 371; idList();
					State = 372; Match(T__3);
					}
					break;
				case 3:
					{
					State = 374; propertyAccessor();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallExprContext : ParserRuleContext {
		public ITerminalNode LP() { return GetToken(ExpressParser.LP, 0); }
		public FuncParametersContext funcParameters() {
			return GetRuleContext<FuncParametersContext>(0);
		}
		public ITerminalNode RP() { return GetToken(ExpressParser.RP, 0); }
		public ITerminalNode EXISTS() { return GetToken(ExpressParser.EXISTS, 0); }
		public ITerminalNode SIZEOF() { return GetToken(ExpressParser.SIZEOF, 0); }
		public ITerminalNode TYPEOF() { return GetToken(ExpressParser.TYPEOF, 0); }
		public ITerminalNode ABS() { return GetToken(ExpressParser.ABS, 0); }
		public ITerminalNode USEDIN() { return GetToken(ExpressParser.USEDIN, 0); }
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public FuncCallExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCallExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterFuncCallExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitFuncCallExpr(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallExprContext funcCallExpr() {
		FuncCallExprContext _localctx = new FuncCallExprContext(Context, State);
		EnterRule(_localctx, 32, RULE_funcCallExpr);
		int _la;
		try {
			State = 387;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 379;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & ((1L << (EXISTS - 46)) | (1L << (SIZEOF - 46)) | (1L << (TYPEOF - 46)) | (1L << (ABS - 46)) | (1L << (USEDIN - 46)) | (1L << (Identifier - 46)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 380; Match(LP);
				State = 381; funcParameters();
				State = 382; Match(RP);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 384;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & ((1L << (EXISTS - 46)) | (1L << (SIZEOF - 46)) | (1L << (TYPEOF - 46)) | (1L << (ABS - 46)) | (1L << (USEDIN - 46)) | (1L << (Identifier - 46)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 385; Match(LP);
				State = 386; Match(RP);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncParametersContext : ParserRuleContext {
		public QueryExprContext queryExpr() {
			return GetRuleContext<QueryExprContext>(0);
		}
		public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		public FuncParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterFuncParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitFuncParameters(this);
		}
	}

	[RuleVersion(0)]
	public FuncParametersContext funcParameters() {
		FuncParametersContext _localctx = new FuncParametersContext(Context, State);
		EnterRule(_localctx, 34, RULE_funcParameters);
		int _la;
		try {
			State = 398;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QUERY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 389; queryExpr();
				}
				break;
			case T__1:
			case T__2:
			case SELF:
			case EXISTS:
			case SIZEOF:
			case TYPEOF:
			case ABS:
			case USEDIN:
			case IfcType:
			case Integer:
			case LP:
			case NOT:
			case Scientific:
			case Float:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 390; atom();
				State = 395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 391; Match(T__4);
					State = 392; atom();
					}
					}
					State = 397;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExprContext : ParserRuleContext {
		public ITerminalNode QUERY() { return GetToken(ExpressParser.QUERY, 0); }
		public ITerminalNode LP() { return GetToken(ExpressParser.LP, 0); }
		public ITerminalNode[] Identifier() { return GetTokens(ExpressParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(ExpressParser.Identifier, i);
		}
		public ITerminalNode INIT() { return GetToken(ExpressParser.INIT, 0); }
		public ITerminalNode PIPE() { return GetToken(ExpressParser.PIPE, 0); }
		public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		public ITerminalNode RP() { return GetToken(ExpressParser.RP, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public PropertyAccessorContext propertyAccessor() {
			return GetRuleContext<PropertyAccessorContext>(0);
		}
		public FuncCallExprContext funcCallExpr() {
			return GetRuleContext<FuncCallExprContext>(0);
		}
		public QueryExprContext queryExpr() {
			return GetRuleContext<QueryExprContext>(0);
		}
		public QueryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterQueryExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitQueryExpr(this);
		}
	}

	[RuleVersion(0)]
	public QueryExprContext queryExpr() {
		QueryExprContext _localctx = new QueryExprContext(Context, State);
		EnterRule(_localctx, 36, RULE_queryExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400; Match(QUERY);
			State = 401; Match(LP);
			State = 402; Match(Identifier);
			State = 403; Match(INIT);
			State = 409;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 404; Match(Identifier);
				}
				break;
			case 2:
				{
				State = 405; path();
				}
				break;
			case 3:
				{
				State = 406; propertyAccessor();
				}
				break;
			case 4:
				{
				State = 407; funcCallExpr();
				}
				break;
			case 5:
				{
				State = 408; queryExpr();
				}
				break;
			}
			State = 411; Match(PIPE);
			State = 412; boolExpr();
			State = 413; Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulDivExprContext : ParserRuleContext {
		public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		public AddSubExprContext[] addSubExpr() {
			return GetRuleContexts<AddSubExprContext>();
		}
		public AddSubExprContext addSubExpr(int i) {
			return GetRuleContext<AddSubExprContext>(i);
		}
		public ITerminalNode[] MUL() { return GetTokens(ExpressParser.MUL); }
		public ITerminalNode MUL(int i) {
			return GetToken(ExpressParser.MUL, i);
		}
		public ITerminalNode[] DIV() { return GetTokens(ExpressParser.DIV); }
		public ITerminalNode DIV(int i) {
			return GetToken(ExpressParser.DIV, i);
		}
		public MulDivExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulDivExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterMulDivExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitMulDivExpr(this);
		}
	}

	[RuleVersion(0)]
	public MulDivExprContext mulDivExpr() {
		MulDivExprContext _localctx = new MulDivExprContext(Context, State);
		EnterRule(_localctx, 38, RULE_mulDivExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 415; atom();
				}
				break;
			case 2:
				{
				State = 416; addSubExpr();
				}
				break;
			}
			State = 424;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 419;
				_la = TokenStream.LA(1);
				if ( !(_la==MUL || _la==DIV) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 422;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
				case 1:
					{
					State = 420; atom();
					}
					break;
				case 2:
					{
					State = 421; addSubExpr();
					}
					break;
				}
				}
				}
				State = 426;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==MUL || _la==DIV );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddSubExprContext : ParserRuleContext {
		public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		public ITerminalNode[] ADD() { return GetTokens(ExpressParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(ExpressParser.ADD, i);
		}
		public ITerminalNode[] SUB() { return GetTokens(ExpressParser.SUB); }
		public ITerminalNode SUB(int i) {
			return GetToken(ExpressParser.SUB, i);
		}
		public AddSubExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addSubExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterAddSubExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitAddSubExpr(this);
		}
	}

	[RuleVersion(0)]
	public AddSubExprContext addSubExpr() {
		AddSubExprContext _localctx = new AddSubExprContext(Context, State);
		EnterRule(_localctx, 40, RULE_addSubExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428; atom();
			State = 431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 429;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==SUB) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 430; atom();
				}
				}
				State = 433;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ADD || _la==SUB );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityDeclarationContext : ParserRuleContext {
		public ITerminalNode ENTITY() { return GetToken(ExpressParser.ENTITY, 0); }
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public EntityDeclarationBodyContext entityDeclarationBody() {
			return GetRuleContext<EntityDeclarationBodyContext>(0);
		}
		public ITerminalNode END_ENTITY() { return GetToken(ExpressParser.END_ENTITY, 0); }
		public EntityDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterEntityDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitEntityDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public EntityDeclarationContext entityDeclaration() {
		EntityDeclarationContext _localctx = new EntityDeclarationContext(Context, State);
		EnterRule(_localctx, 42, RULE_entityDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435; Match(ENTITY);
			State = 436; Match(Identifier);
			State = 438;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 437; Match(T__0);
				}
			}

			State = 440; entityDeclarationBody();
			State = 441; Match(END_ENTITY);
			State = 442; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityDeclarationBodyContext : ParserRuleContext {
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SupertypeDeclarationContext supertypeDeclaration() {
			return GetRuleContext<SupertypeDeclarationContext>(0);
		}
		public SubtypeDeclarationContext subtypeDeclaration() {
			return GetRuleContext<SubtypeDeclarationContext>(0);
		}
		public DeriveDeclarationContext deriveDeclaration() {
			return GetRuleContext<DeriveDeclarationContext>(0);
		}
		public InverseDeclarationContext inverseDeclaration() {
			return GetRuleContext<InverseDeclarationContext>(0);
		}
		public UniqueDeclarationContext uniqueDeclaration() {
			return GetRuleContext<UniqueDeclarationContext>(0);
		}
		public RuleDeclarationContext ruleDeclaration() {
			return GetRuleContext<RuleDeclarationContext>(0);
		}
		public EntityDeclarationBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityDeclarationBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterEntityDeclarationBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitEntityDeclarationBody(this);
		}
	}

	[RuleVersion(0)]
	public EntityDeclarationBodyContext entityDeclarationBody() {
		EntityDeclarationBodyContext _localctx = new EntityDeclarationBodyContext(Context, State);
		EnterRule(_localctx, 44, RULE_entityDeclarationBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (SELF - 38)) | (1L << (EXISTS - 38)) | (1L << (SIZEOF - 38)) | (1L << (TYPEOF - 38)) | (1L << (ABS - 38)) | (1L << (USEDIN - 38)) | (1L << (Identifier - 38)))) != 0)) {
				{
				{
				State = 444; attribute();
				}
				}
				State = 449;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 451;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ABSTRACT || _la==SUPERTYPE) {
				{
				State = 450; supertypeDeclaration();
				}
			}

			State = 454;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUBTYPE) {
				{
				State = 453; subtypeDeclaration();
				}
			}

			State = 457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DERIVE) {
				{
				State = 456; deriveDeclaration();
				}
			}

			State = 460;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INVERSE) {
				{
				State = 459; inverseDeclaration();
				}
			}

			State = 463;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNIQUE) {
				{
				State = 462; uniqueDeclaration();
				}
			}

			State = 466;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 465; ruleDeclaration();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SupertypeDeclarationContext : ParserRuleContext {
		public SupertypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supertypeDeclaration; } }
	 
		public SupertypeDeclarationContext() { }
		public virtual void CopyFrom(SupertypeDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SupertypesDeclContext : SupertypeDeclarationContext {
		public ITerminalNode SUPERTYPE() { return GetToken(ExpressParser.SUPERTYPE, 0); }
		public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		public ITerminalNode LP() { return GetToken(ExpressParser.LP, 0); }
		public OneOfContext oneOf() {
			return GetRuleContext<OneOfContext>(0);
		}
		public ITerminalNode RP() { return GetToken(ExpressParser.RP, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(ExpressParser.ABSTRACT, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SupertypesDeclContext(SupertypeDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSupertypesDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSupertypesDecl(this);
		}
	}
	public partial class SupertypeDeclContext : SupertypeDeclarationContext {
		public ITerminalNode SUPERTYPE() { return GetToken(ExpressParser.SUPERTYPE, 0); }
		public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		public ITerminalNode LP() { return GetToken(ExpressParser.LP, 0); }
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public ITerminalNode RP() { return GetToken(ExpressParser.RP, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(ExpressParser.ABSTRACT, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SupertypeDeclContext(SupertypeDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSupertypeDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSupertypeDecl(this);
		}
	}

	[RuleVersion(0)]
	public SupertypeDeclarationContext supertypeDeclaration() {
		SupertypeDeclarationContext _localctx = new SupertypeDeclarationContext(Context, State);
		EnterRule(_localctx, 46, RULE_supertypeDeclaration);
		int _la;
		try {
			State = 502;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				_localctx = new SupertypeDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 469;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ABSTRACT) {
					{
					State = 468; Match(ABSTRACT);
					}
				}

				State = 471; Match(SUPERTYPE);
				State = 472; Match(OF);
				State = 473; Match(LP);
				State = 474; Match(Identifier);
				State = 475; Match(RP);
				State = 477;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 476; Match(T__0);
					}
				}

				State = 482;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (SELF - 38)) | (1L << (EXISTS - 38)) | (1L << (SIZEOF - 38)) | (1L << (TYPEOF - 38)) | (1L << (ABS - 38)) | (1L << (USEDIN - 38)) | (1L << (Identifier - 38)))) != 0)) {
					{
					{
					State = 479; attribute();
					}
					}
					State = 484;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SupertypesDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 486;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ABSTRACT) {
					{
					State = 485; Match(ABSTRACT);
					}
				}

				State = 488; Match(SUPERTYPE);
				State = 489; Match(OF);
				State = 490; Match(LP);
				State = 491; oneOf();
				State = 492; Match(RP);
				State = 494;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 493; Match(T__0);
					}
				}

				State = 499;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (SELF - 38)) | (1L << (EXISTS - 38)) | (1L << (SIZEOF - 38)) | (1L << (TYPEOF - 38)) | (1L << (ABS - 38)) | (1L << (USEDIN - 38)) | (1L << (Identifier - 38)))) != 0)) {
					{
					{
					State = 496; attribute();
					}
					}
					State = 501;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtypeDeclarationContext : ParserRuleContext {
		public SubtypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtypeDeclaration; } }
	 
		public SubtypeDeclarationContext() { }
		public virtual void CopyFrom(SubtypeDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubtypeDeclContext : SubtypeDeclarationContext {
		public ITerminalNode SUBTYPE() { return GetToken(ExpressParser.SUBTYPE, 0); }
		public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		public ITerminalNode LP() { return GetToken(ExpressParser.LP, 0); }
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public ITerminalNode RP() { return GetToken(ExpressParser.RP, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SubtypeDeclContext(SubtypeDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSubtypeDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSubtypeDecl(this);
		}
	}
	public partial class SubtypesDeclContext : SubtypeDeclarationContext {
		public ITerminalNode SUBTYPE() { return GetToken(ExpressParser.SUBTYPE, 0); }
		public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		public ITerminalNode LP() { return GetToken(ExpressParser.LP, 0); }
		public OneOfContext oneOf() {
			return GetRuleContext<OneOfContext>(0);
		}
		public ITerminalNode RP() { return GetToken(ExpressParser.RP, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SubtypesDeclContext(SubtypeDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSubtypesDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSubtypesDecl(this);
		}
	}

	[RuleVersion(0)]
	public SubtypeDeclarationContext subtypeDeclaration() {
		SubtypeDeclarationContext _localctx = new SubtypeDeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_subtypeDeclaration);
		int _la;
		try {
			State = 528;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				_localctx = new SubtypeDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 504; Match(SUBTYPE);
				State = 505; Match(OF);
				State = 506; Match(LP);
				State = 507; Match(Identifier);
				State = 508; Match(RP);
				State = 509; Match(T__0);
				State = 513;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (SELF - 38)) | (1L << (EXISTS - 38)) | (1L << (SIZEOF - 38)) | (1L << (TYPEOF - 38)) | (1L << (ABS - 38)) | (1L << (USEDIN - 38)) | (1L << (Identifier - 38)))) != 0)) {
					{
					{
					State = 510; attribute();
					}
					}
					State = 515;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SubtypesDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 516; Match(SUBTYPE);
				State = 517; Match(OF);
				State = 518; Match(LP);
				State = 519; oneOf();
				State = 520; Match(RP);
				State = 521; Match(T__0);
				State = 525;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (SELF - 38)) | (1L << (EXISTS - 38)) | (1L << (SIZEOF - 38)) | (1L << (TYPEOF - 38)) | (1L << (ABS - 38)) | (1L << (USEDIN - 38)) | (1L << (Identifier - 38)))) != 0)) {
					{
					{
					State = 522; attribute();
					}
					}
					State = 527;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(ExpressParser.COLON, 0); }
		public OptionalContext optional() {
			return GetRuleContext<OptionalContext>(0);
		}
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 50, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 532;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 530; Match(Identifier);
				}
				break;
			case 2:
				{
				State = 531; path();
				}
				break;
			}
			State = 534; Match(COLON);
			State = 535; optional();
			State = 536; valueType();
			State = 538;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEF) {
				{
				State = 537; definition();
				}
			}

			State = 540; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalContext : ParserRuleContext {
		public ITerminalNode OPTIONAL() { return GetToken(ExpressParser.OPTIONAL, 0); }
		public OptionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optional; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterOptional(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitOptional(this);
		}
	}

	[RuleVersion(0)]
	public OptionalContext optional() {
		OptionalContext _localctx = new OptionalContext(Context, State);
		EnterRule(_localctx, 52, RULE_optional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 543;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONAL) {
				{
				State = 542; Match(OPTIONAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public ITerminalNode DEF() { return GetToken(ExpressParser.DEF, 0); }
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 54, RULE_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545; Match(DEF);
			State = 548;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 546; atom();
				}
				break;
			case 2:
				{
				State = 547; expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OneOfContext : ParserRuleContext {
		public ITerminalNode ONEOF() { return GetToken(ExpressParser.ONEOF, 0); }
		public ITerminalNode LP() { return GetToken(ExpressParser.LP, 0); }
		public IdListContext idList() {
			return GetRuleContext<IdListContext>(0);
		}
		public ITerminalNode RP() { return GetToken(ExpressParser.RP, 0); }
		public OneOfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oneOf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterOneOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitOneOf(this);
		}
	}

	[RuleVersion(0)]
	public OneOfContext oneOf() {
		OneOfContext _localctx = new OneOfContext(Context, State);
		EnterRule(_localctx, 56, RULE_oneOf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550; Match(ONEOF);
			State = 551; Match(LP);
			State = 552; idList();
			State = 553; Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InverseDeclarationContext : ParserRuleContext {
		public ITerminalNode INVERSE() { return GetToken(ExpressParser.INVERSE, 0); }
		public InverseAttributeContext[] inverseAttribute() {
			return GetRuleContexts<InverseAttributeContext>();
		}
		public InverseAttributeContext inverseAttribute(int i) {
			return GetRuleContext<InverseAttributeContext>(i);
		}
		public InverseDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inverseDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterInverseDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitInverseDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public InverseDeclarationContext inverseDeclaration() {
		InverseDeclarationContext _localctx = new InverseDeclarationContext(Context, State);
		EnterRule(_localctx, 58, RULE_inverseDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 555; Match(INVERSE);
			State = 557;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 556; inverseAttribute();
				}
				}
				State = 559;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InverseAttributeContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(ExpressParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(ExpressParser.Identifier, i);
		}
		public ITerminalNode COLON() { return GetToken(ExpressParser.COLON, 0); }
		public ITerminalNode FOR() { return GetToken(ExpressParser.FOR, 0); }
		public CollectionDeclarationContext collectionDeclaration() {
			return GetRuleContext<CollectionDeclarationContext>(0);
		}
		public InverseAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inverseAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterInverseAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitInverseAttribute(this);
		}
	}

	[RuleVersion(0)]
	public InverseAttributeContext inverseAttribute() {
		InverseAttributeContext _localctx = new InverseAttributeContext(Context, State);
		EnterRule(_localctx, 60, RULE_inverseAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561; Match(Identifier);
			State = 562; Match(COLON);
			State = 565;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 563; Match(Identifier);
				}
				break;
			case LIST:
			case SET:
			case ARRAY:
				{
				State = 564; collectionDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 567; Match(FOR);
			State = 568; Match(Identifier);
			State = 569; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeriveDeclarationContext : ParserRuleContext {
		public ITerminalNode DERIVE() { return GetToken(ExpressParser.DERIVE, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public DeriveDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deriveDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterDeriveDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitDeriveDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeriveDeclarationContext deriveDeclaration() {
		DeriveDeclarationContext _localctx = new DeriveDeclarationContext(Context, State);
		EnterRule(_localctx, 62, RULE_deriveDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571; Match(DERIVE);
			State = 573;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 572; attribute();
				}
				}
				State = 575;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (SELF - 38)) | (1L << (EXISTS - 38)) | (1L << (SIZEOF - 38)) | (1L << (TYPEOF - 38)) | (1L << (ABS - 38)) | (1L << (USEDIN - 38)) | (1L << (Identifier - 38)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UniqueDeclarationContext : ParserRuleContext {
		public ITerminalNode UNIQUE() { return GetToken(ExpressParser.UNIQUE, 0); }
		public UniqueStatementContext[] uniqueStatement() {
			return GetRuleContexts<UniqueStatementContext>();
		}
		public UniqueStatementContext uniqueStatement(int i) {
			return GetRuleContext<UniqueStatementContext>(i);
		}
		public UniqueDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uniqueDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterUniqueDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitUniqueDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public UniqueDeclarationContext uniqueDeclaration() {
		UniqueDeclarationContext _localctx = new UniqueDeclarationContext(Context, State);
		EnterRule(_localctx, 64, RULE_uniqueDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577; Match(UNIQUE);
			State = 579;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 578; uniqueStatement();
				}
				}
				State = 581;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UniqueStatementContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(ExpressParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(ExpressParser.Identifier, i);
		}
		public ITerminalNode COLON() { return GetToken(ExpressParser.COLON, 0); }
		public IdListContext idList() {
			return GetRuleContext<IdListContext>(0);
		}
		public UniqueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uniqueStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterUniqueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitUniqueStatement(this);
		}
	}

	[RuleVersion(0)]
	public UniqueStatementContext uniqueStatement() {
		UniqueStatementContext _localctx = new UniqueStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_uniqueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583; Match(Identifier);
			State = 584; Match(COLON);
			State = 587;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 585; Match(Identifier);
				}
				break;
			case 2:
				{
				State = 586; idList();
				}
				break;
			}
			State = 589; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public FunctionDeclarationBodyContext functionDeclarationBody() {
			return GetRuleContext<FunctionDeclarationBodyContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 68, RULE_functionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591; Match(T__5);
			State = 592; functionDeclarationBody();
			State = 593; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationBodyContext : ParserRuleContext {
		public FunctionDeclarationBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclarationBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterFunctionDeclarationBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitFunctionDeclarationBody(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationBodyContext functionDeclarationBody() {
		FunctionDeclarationBodyContext _localctx = new FunctionDeclarationBodyContext(Context, State);
		EnterRule(_localctx, 70, RULE_functionDeclarationBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 598;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 595;
					MatchWildcard();
					}
					} 
				}
				State = 600;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(ExpressParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(ExpressParser.Identifier, i);
		}
		public PropertyAccessorContext[] propertyAccessor() {
			return GetRuleContexts<PropertyAccessorContext>();
		}
		public PropertyAccessorContext propertyAccessor(int i) {
			return GetRuleContext<PropertyAccessorContext>(i);
		}
		public ITerminalNode SELF() { return GetToken(ExpressParser.SELF, 0); }
		public PathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterPath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitPath(this);
		}
	}

	[RuleVersion(0)]
	public PathContext path() {
		PathContext _localctx = new PathContext(Context, State);
		EnterRule(_localctx, 72, RULE_path);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 601; Match(SELF);
				State = 602; Match(T__7);
				}
				break;
			}
			State = 607;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 605; Match(Identifier);
				}
				break;
			case 2:
				{
				State = 606; propertyAccessor();
				}
				break;
			}
			State = 616;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 609; Match(T__7);
				State = 612;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
				case 1:
					{
					State = 610; Match(Identifier);
					}
					break;
				case 2:
					{
					State = 611; propertyAccessor();
					}
					break;
				}
				}
				}
				State = 618;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAccessorContext : ParserRuleContext {
		public SetAccessorContext[] setAccessor() {
			return GetRuleContexts<SetAccessorContext>();
		}
		public SetAccessorContext setAccessor(int i) {
			return GetRuleContext<SetAccessorContext>(i);
		}
		public ITerminalNode[] Identifier() { return GetTokens(ExpressParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(ExpressParser.Identifier, i);
		}
		public FuncCallExprContext funcCallExpr() {
			return GetRuleContext<FuncCallExprContext>(0);
		}
		public ITerminalNode SELF() { return GetToken(ExpressParser.SELF, 0); }
		public PropertyAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterPropertyAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitPropertyAccessor(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAccessorContext propertyAccessor() {
		PropertyAccessorContext _localctx = new PropertyAccessorContext(Context, State);
		EnterRule(_localctx, 74, RULE_propertyAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 623;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				{
				State = 619; setAccessor();
				}
				break;
			case 2:
				{
				State = 620; Match(Identifier);
				}
				break;
			case 3:
				{
				State = 621; funcCallExpr();
				}
				break;
			case 4:
				{
				State = 622; Match(SELF);
				}
				break;
			}
			State = 630;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 625; Match(T__8);
				State = 628;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
				case 1:
					{
					State = 626; setAccessor();
					}
					break;
				case 2:
					{
					State = 627; Match(Identifier);
					}
					break;
				}
				}
				}
				State = 632;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__8 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetAccessorContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(ExpressParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(ExpressParser.Identifier, i);
		}
		public ITerminalNode Integer() { return GetToken(ExpressParser.Integer, 0); }
		public ITerminalNode SELF() { return GetToken(ExpressParser.SELF, 0); }
		public SetAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSetAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSetAccessor(this);
		}
	}

	[RuleVersion(0)]
	public SetAccessorContext setAccessor() {
		SetAccessorContext _localctx = new SetAccessorContext(Context, State);
		EnterRule(_localctx, 76, RULE_setAccessor);
		int _la;
		try {
			State = 642;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 634; Match(Identifier);
				State = 635; Match(T__1);
				State = 636;
				_la = TokenStream.LA(1);
				if ( !(_la==Integer || _la==Identifier) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 637; Match(T__3);
				}
				break;
			case SELF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 638; Match(SELF);
				State = 639; Match(T__1);
				State = 640;
				_la = TokenStream.LA(1);
				if ( !(_la==Integer || _la==Identifier) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 641; Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'V', '\x287', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 'U', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', 'X', '\v', '\x2', '\x3', '\x2', '\a', '\x2', 
		'[', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '^', '\v', '\x2', '\x3', 
		'\x2', '\a', '\x2', '\x61', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x64', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', 'p', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', 's', 
		'\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'w', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '\x89', '\n', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\x91', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '\x99', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\xA1', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x6', '\a', '\xAA', '\n', 
		'\a', '\r', '\a', '\xE', '\a', '\xAB', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x6', '\a', '\xB6', '\n', '\a', '\r', '\a', '\xE', '\a', '\xB7', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', '\xC1', '\n', '\a', '\x3', '\a', '\x3', '\a', 
		'\x6', '\a', '\xC5', '\n', '\a', '\r', '\a', '\xE', '\a', '\xC6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xCC', '\n', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\xE2', '\n', '\v', 
		'\f', '\v', '\xE', '\v', '\xE5', '\v', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\a', '\v', '\xEA', '\n', '\v', '\f', '\v', '\xE', '\v', 
		'\xED', '\v', '\v', '\x5', '\v', '\xEF', '\n', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\r', '\x3', '\r', '\x6', '\r', '\xF5', '\n', '\r', '\r', 
		'\r', '\xE', '\r', '\xF6', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x5', '\xF', '\x102', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\x106', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\x10C', '\n', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x6', '\x10', '\x123', '\n', '\x10', '\r', '\x10', '\xE', '\x10', '\x124', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x6', '\x10', '\x12C', '\n', '\x10', '\r', '\x10', '\xE', '\x10', '\x12D', 
		'\x3', '\x10', '\x5', '\x10', '\x131', '\n', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x144', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x14B', '\n', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', 
		'\x11', '\x151', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x154', '\v', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x159', 
		'\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x15D', '\n', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x161', '\n', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x165', '\n', '\x11', '\a', 
		'\x11', '\x167', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x16A', '\v', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x171', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\x17A', '\n', '\x11', '\x5', '\x11', '\x17C', '\n', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x186', '\n', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', 
		'\x13', '\x18C', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x18F', '\v', 
		'\x13', '\x5', '\x13', '\x191', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x19C', '\n', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x5', '\x15', '\x1A4', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x5', '\x15', '\x1A9', '\n', '\x15', '\x6', '\x15', '\x1AB', 
		'\n', '\x15', '\r', '\x15', '\xE', '\x15', '\x1AC', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x6', '\x16', '\x1B2', '\n', '\x16', '\r', '\x16', 
		'\xE', '\x16', '\x1B3', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', 
		'\x17', '\x1B9', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x18', '\a', '\x18', '\x1C0', '\n', '\x18', '\f', 
		'\x18', '\xE', '\x18', '\x1C3', '\v', '\x18', '\x3', '\x18', '\x5', '\x18', 
		'\x1C6', '\n', '\x18', '\x3', '\x18', '\x5', '\x18', '\x1C9', '\n', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\x1CC', '\n', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\x1CF', '\n', '\x18', '\x3', '\x18', '\x5', '\x18', '\x1D2', 
		'\n', '\x18', '\x3', '\x18', '\x5', '\x18', '\x1D5', '\n', '\x18', '\x3', 
		'\x19', '\x5', '\x19', '\x1D8', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', 
		'\x1E0', '\n', '\x19', '\x3', '\x19', '\a', '\x19', '\x1E3', '\n', '\x19', 
		'\f', '\x19', '\xE', '\x19', '\x1E6', '\v', '\x19', '\x3', '\x19', '\x5', 
		'\x19', '\x1E9', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x1F1', '\n', 
		'\x19', '\x3', '\x19', '\a', '\x19', '\x1F4', '\n', '\x19', '\f', '\x19', 
		'\xE', '\x19', '\x1F7', '\v', '\x19', '\x5', '\x19', '\x1F9', '\n', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x202', '\n', '\x1A', '\f', 
		'\x1A', '\xE', '\x1A', '\x205', '\v', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\a', '\x1A', '\x20E', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x211', 
		'\v', '\x1A', '\x5', '\x1A', '\x213', '\n', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x5', '\x1B', '\x217', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x21D', '\n', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x5', '\x1C', '\x222', '\n', '\x1C', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x227', '\n', 
		'\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x6', '\x1F', '\x230', '\n', '\x1F', 
		'\r', '\x1F', '\xE', '\x1F', '\x231', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x5', ' ', '\x238', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x6', '!', '\x240', '\n', '!', 
		'\r', '!', '\xE', '!', '\x241', '\x3', '\"', '\x3', '\"', '\x6', '\"', 
		'\x246', '\n', '\"', '\r', '\"', '\xE', '\"', '\x247', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x5', '#', '\x24E', '\n', '#', '\x3', '#', 
		'\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '%', 
		'\a', '%', '\x257', '\n', '%', '\f', '%', '\xE', '%', '\x25A', '\v', '%', 
		'\x3', '&', '\x3', '&', '\x5', '&', '\x25E', '\n', '&', '\x3', '&', '\x3', 
		'&', '\x5', '&', '\x262', '\n', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x5', '&', '\x267', '\n', '&', '\a', '&', '\x269', '\n', '&', '\f', '&', 
		'\xE', '&', '\x26C', '\v', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x5', '\'', '\x272', '\n', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x5', '\'', '\x277', '\n', '\'', '\x6', '\'', '\x279', '\n', 
		'\'', '\r', '\'', '\xE', '\'', '\x27A', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x5', 
		'(', '\x285', '\n', '(', '\x3', '(', '\x3', '\x258', '\x2', ')', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', 
		'\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', 
		'\x46', 'H', 'J', 'L', 'N', '\x2', '\v', '\a', '\x2', '\f', '\xE', '\x10', 
		'\x11', '\x13', '\x13', '\x15', '\x15', 'R', 'R', '\x5', '\x2', '\x5', 
		'\x5', '\x38', '\x38', 'R', 'R', '\x4', '\x2', '@', '\x45', 'K', 'L', 
		'\x4', '\x2', '@', '\x44', 'K', 'L', '\x5', '\x2', '\x18', '\x18', '$', 
		'$', '/', '/', '\x5', '\x2', '\x30', '\x31', '\x33', '\x35', 'R', 'R', 
		'\x3', '\x2', '\x46', 'G', '\x3', '\x2', 'H', 'I', '\x4', '\x2', '\x38', 
		'\x38', 'R', 'R', '\x2', '\x2DE', '\x2', 'P', '\x3', '\x2', '\x2', '\x2', 
		'\x4', 'i', '\x3', '\x2', '\x2', '\x2', '\x6', '{', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x88', '\x3', '\x2', '\x2', '\x2', '\n', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\x10', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\xD9', '\x3', '\x2', '\x2', '\x2', '\x14', '\xEE', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\xF0', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\xF2', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xF8', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x101', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x130', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x17B', '\x3', '\x2', '\x2', '\x2', '\"', '\x185', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x190', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x192', '\x3', '\x2', '\x2', '\x2', '(', '\x1A3', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x1AE', '\x3', '\x2', '\x2', '\x2', ',', '\x1B5', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x1C1', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x1F8', '\x3', '\x2', '\x2', '\x2', '\x32', '\x212', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x216', '\x3', '\x2', '\x2', '\x2', '\x36', '\x221', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x223', '\x3', '\x2', '\x2', '\x2', 
		':', '\x228', '\x3', '\x2', '\x2', '\x2', '<', '\x22D', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x233', '\x3', '\x2', '\x2', '\x2', '@', '\x23D', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x243', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x249', '\x3', '\x2', '\x2', '\x2', '\x46', '\x251', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x258', '\x3', '\x2', '\x2', '\x2', 'J', '\x25D', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x271', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x284', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\a', '%', '\x2', 
		'\x2', 'Q', 'R', '\a', '\x37', '\x2', '\x2', 'R', 'V', '\a', '\x3', '\x2', 
		'\x2', 'S', 'U', '\x5', '\x4', '\x3', '\x2', 'T', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'X', '\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', '\\', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 'Y', '[', '\x5', ',', 
		'\x17', '\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '^', '\x3', 
		'\x2', '\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', ']', 
		'\x3', '\x2', '\x2', '\x2', ']', '\x62', '\x3', '\x2', '\x2', '\x2', '^', 
		'\\', '\x3', '\x2', '\x2', '\x2', '_', '\x61', '\x5', '\x46', '$', '\x2', 
		'`', '_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x65', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\a', '&', '\x2', 
		'\x2', '\x66', 'g', '\a', '\x3', '\x2', '\x2', 'g', 'h', '\a', '\x2', 
		'\x2', '\x3', 'h', '\x3', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\a', 
		'+', '\x2', '\x2', 'j', 'k', '\a', 'R', '\x2', '\x2', 'k', 'o', '\a', 
		'@', '\x2', '\x2', 'l', 'p', '\x5', '\b', '\x5', '\x2', 'm', 'p', '\x5', 
		'\x10', '\t', '\x2', 'n', 'p', '\x3', '\x2', '\x2', '\x2', 'o', 'l', '\x3', 
		'\x2', '\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 'o', 'n', '\x3', 
		'\x2', '\x2', '\x2', 'p', 'r', '\x3', '\x2', '\x2', '\x2', 'q', 's', '\a', 
		'\x14', '\x2', '\x2', 'r', 'q', '\x3', '\x2', '\x2', '\x2', 'r', 's', 
		'\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 't', 
		'v', '\a', '\x3', '\x2', '\x2', 'u', 'w', '\x5', '\x16', '\f', '\x2', 
		'v', 'u', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 
		'w', 'x', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\a', ',', '\x2', '\x2', 
		'y', 'z', '\a', '\x3', '\x2', '\x2', 'z', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '{', '|', '\a', 'R', '\x2', '\x2', '|', '\a', '\x3', '\x2', '\x2', 
		'\x2', '}', '\x89', '\a', '\f', '\x2', '\x2', '~', '\x89', '\a', '\r', 
		'\x2', '\x2', '\x7F', '\x89', '\a', '\xE', '\x2', '\x2', '\x80', '\x89', 
		'\a', '\x10', '\x2', '\x2', '\x81', '\x89', '\a', '\x11', '\x2', '\x2', 
		'\x82', '\x89', '\a', '\x15', '\x2', '\x2', '\x83', '\x89', '\a', '\x13', 
		'\x2', '\x2', '\x84', '\x89', '\a', 'R', '\x2', '\x2', '\x85', '\x89', 
		'\x5', '\x10', '\t', '\x2', '\x86', '\x89', '\x5', '\x12', '\n', '\x2', 
		'\x87', '\x89', '\x5', '\f', '\a', '\x2', '\x88', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '~', '\x3', '\x2', '\x2', '\x2', '\x88', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x80', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x88', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '\x83', '\x3', '\x2', '\x2', '\x2', '\x88', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x85', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x88', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x89', '\t', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\t', 
		'\x2', '\x2', '\x2', '\x8B', '\v', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8D', '\a', '\x16', '\x2', '\x2', '\x8D', '\x8E', '\x5', '\xE', '\b', 
		'\x2', '\x8E', '\x90', '\a', '!', '\x2', '\x2', '\x8F', '\x91', '\a', 
		'-', '\x2', '\x2', '\x90', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x93', '\x5', '\n', '\x6', '\x2', '\x93', '\xCC', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x95', '\a', '\x12', '\x2', '\x2', '\x95', 
		'\x96', '\x5', '\xE', '\b', '\x2', '\x96', '\x98', '\a', '!', '\x2', '\x2', 
		'\x97', '\x99', '\a', '-', '\x2', '\x2', '\x98', '\x97', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x5', '\n', '\x6', '\x2', 
		'\x9B', '\xCC', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\a', '\xF', 
		'\x2', '\x2', '\x9D', '\x9E', '\x5', '\xE', '\b', '\x2', '\x9E', '\xA0', 
		'\a', '!', '\x2', '\x2', '\x9F', '\xA1', '\a', '-', '\x2', '\x2', '\xA0', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x5', 
		'\n', '\x6', '\x2', '\xA3', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA5', '\a', '\x16', '\x2', '\x2', '\xA5', '\xA9', '\x5', '\xE', '\b', 
		'\x2', '\xA6', '\xA7', '\a', '!', '\x2', '\x2', '\xA7', '\xA8', '\a', 
		'\x16', '\x2', '\x2', '\xA8', '\xAA', '\x5', '\xE', '\b', '\x2', '\xA9', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', 
		'\x2', '\x2', '\x2', '\xAC', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xAE', '\a', '!', '\x2', '\x2', '\xAE', '\xAF', '\x5', '\n', '\x6', '\x2', 
		'\xAF', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\a', '\x12', 
		'\x2', '\x2', '\xB1', '\xB5', '\x5', '\xE', '\b', '\x2', '\xB2', '\xB3', 
		'\a', '!', '\x2', '\x2', '\xB3', '\xB4', '\a', '\x12', '\x2', '\x2', '\xB4', 
		'\xB6', '\x5', '\xE', '\b', '\x2', '\xB5', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB5', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB8', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\a', '!', '\x2', 
		'\x2', '\xBA', '\xBB', '\x5', '\n', '\x6', '\x2', '\xBB', '\xCC', '\x3', 
		'\x2', '\x2', '\x2', '\xBC', '\xBD', '\a', '\xF', '\x2', '\x2', '\xBD', 
		'\xC4', '\x5', '\xE', '\b', '\x2', '\xBE', '\xC0', '\a', '!', '\x2', '\x2', 
		'\xBF', '\xC1', '\a', '-', '\x2', '\x2', '\xC0', '\xBF', '\x3', '\x2', 
		'\x2', '\x2', '\xC0', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\a', '\xF', '\x2', '\x2', 
		'\xC3', '\xC5', '\x5', '\xE', '\b', '\x2', '\xC4', '\xBE', '\x3', '\x2', 
		'\x2', '\x2', '\xC5', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC4', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\x3', '\x2', '\x2', '\x2', 
		'\xC7', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\a', '!', 
		'\x2', '\x2', '\xC9', '\xCA', '\x5', '\n', '\x6', '\x2', '\xCA', '\xCC', 
		'\x3', '\x2', '\x2', '\x2', '\xCB', '\x8C', '\x3', '\x2', '\x2', '\x2', 
		'\xCB', '\x94', '\x3', '\x2', '\x2', '\x2', '\xCB', '\x9C', '\x3', '\x2', 
		'\x2', '\x2', '\xCB', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xB0', 
		'\x3', '\x2', '\x2', '\x2', '\xCB', '\xBC', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\r', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\a', '\x4', 
		'\x2', '\x2', '\xCE', '\xCF', '\a', '\x38', '\x2', '\x2', '\xCF', '\xD0', 
		'\a', '=', '\x2', '\x2', '\xD0', '\xD1', '\t', '\x3', '\x2', '\x2', '\xD1', 
		'\xD2', '\a', '\x6', '\x2', '\x2', '\xD2', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xD4', '\a', '\x1C', '\x2', '\x2', '\xD4', '\xD5', '\a', 
		'!', '\x2', '\x2', '\xD5', '\xD6', '\a', '\x39', '\x2', '\x2', '\xD6', 
		'\xD7', '\x5', '\x14', '\v', '\x2', '\xD7', '\xD8', '\a', ':', '\x2', 
		'\x2', '\xD8', '\x11', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', '\a', 
		'\'', '\x2', '\x2', '\xDA', '\xDB', '\a', '\x39', '\x2', '\x2', '\xDB', 
		'\xDC', '\x5', '\x14', '\v', '\x2', '\xDC', '\xDD', '\a', ':', '\x2', 
		'\x2', '\xDD', '\x13', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE3', '\a', 
		'R', '\x2', '\x2', '\xDF', '\xE0', '\a', '\a', '\x2', '\x2', '\xE0', '\xE2', 
		'\a', 'R', '\x2', '\x2', '\xE1', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE2', 
		'\xE5', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE1', '\x3', '\x2', '\x2', 
		'\x2', '\xE3', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xEF', '\x3', 
		'\x2', '\x2', '\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE6', 
		'\xEB', '\a', '\x36', '\x2', '\x2', '\xE7', '\xE8', '\a', '\a', '\x2', 
		'\x2', '\xE8', '\xEA', '\a', '\x36', '\x2', '\x2', '\xE9', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xE9', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', '\x3', '\x2', '\x2', 
		'\x2', '\xEC', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', '\xEE', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xEE', 
		'\xE6', '\x3', '\x2', '\x2', '\x2', '\xEF', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xF0', '\xF1', '\x5', '\x18', '\r', '\x2', '\xF1', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xF4', '\a', '.', '\x2', '\x2', '\xF3', 
		'\xF5', '\x5', '\x1A', '\xE', '\x2', '\xF4', '\xF3', '\x3', '\x2', '\x2', 
		'\x2', '\xF5', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF4', '\x3', 
		'\x2', '\x2', '\x2', '\xF6', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', '\a', 'R', '\x2', 
		'\x2', '\xF9', '\xFA', '\a', '=', '\x2', '\x2', '\xFA', '\xFB', '\x5', 
		' ', '\x11', '\x2', '\xFB', '\xFC', '\a', '\x3', '\x2', '\x2', '\xFC', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xFD', '\x102', '\x5', '\"', '\x12', 
		'\x2', '\xFE', '\x102', '\x5', '(', '\x15', '\x2', '\xFF', '\x102', '\x5', 
		'*', '\x16', '\x2', '\x100', '\x102', '\x5', ' ', '\x11', '\x2', '\x101', 
		'\xFD', '\x3', '\x2', '\x2', '\x2', '\x101', '\xFE', '\x3', '\x2', '\x2', 
		'\x2', '\x101', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x101', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x103', '\x105', '\a', '\x39', '\x2', '\x2', '\x104', '\x106', '\a', 
		'?', '\x2', '\x2', '\x105', '\x104', '\x3', '\x2', '\x2', '\x2', '\x105', 
		'\x106', '\x3', '\x2', '\x2', '\x2', '\x106', '\x107', '\x3', '\x2', '\x2', 
		'\x2', '\x107', '\x108', '\x5', '\x1C', '\xF', '\x2', '\x108', '\x109', 
		'\a', ':', '\x2', '\x2', '\x109', '\x131', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '\x10C', '\a', '?', '\x2', '\x2', '\x10B', '\x10A', '\x3', '\x2', 
		'\x2', '\x2', '\x10B', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10D', 
		'\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\a', '\x39', '\x2', '\x2', 
		'\x10E', '\x10F', '\x5', '\x1C', '\xF', '\x2', '\x10F', '\x110', '\a', 
		':', '\x2', '\x2', '\x110', '\x131', '\x3', '\x2', '\x2', '\x2', '\x111', 
		'\x131', '\a', '(', '\x2', '\x2', '\x112', '\x131', '\a', '\x36', '\x2', 
		'\x2', '\x113', '\x131', '\a', '\x38', '\x2', '\x2', '\x114', '\x131', 
		'\a', 'Q', '\x2', '\x2', '\x115', '\x131', '\a', 'P', '\x2', '\x2', '\x116', 
		'\x131', '\a', 'R', '\x2', '\x2', '\x117', '\x131', '\x5', 'J', '&', '\x2', 
		'\x118', '\x131', '\x5', 'L', '\'', '\x2', '\x119', '\x131', '\x5', 'N', 
		'(', '\x2', '\x11A', '\x11B', '\a', '\x4', '\x2', '\x2', '\x11B', '\x11C', 
		'\x5', '\x14', '\v', '\x2', '\x11C', '\x11D', '\a', '\x6', '\x2', '\x2', 
		'\x11D', '\x131', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11F', '\a', 
		'\x4', '\x2', '\x2', '\x11F', '\x122', '\a', 'Q', '\x2', '\x2', '\x120', 
		'\x121', '\a', '\a', '\x2', '\x2', '\x121', '\x123', '\a', 'Q', '\x2', 
		'\x2', '\x122', '\x120', '\x3', '\x2', '\x2', '\x2', '\x123', '\x124', 
		'\x3', '\x2', '\x2', '\x2', '\x124', '\x122', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '\x125', '\x3', '\x2', '\x2', '\x2', '\x125', '\x126', '\x3', 
		'\x2', '\x2', '\x2', '\x126', '\x131', '\a', '\x6', '\x2', '\x2', '\x127', 
		'\x131', '\x5', '\"', '\x12', '\x2', '\x128', '\x12B', '\x5', '\"', '\x12', 
		'\x2', '\x129', '\x12A', '\a', 'O', '\x2', '\x2', '\x12A', '\x12C', '\x5', 
		'\"', '\x12', '\x2', '\x12B', '\x129', '\x3', '\x2', '\x2', '\x2', '\x12C', 
		'\x12D', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12B', '\x3', '\x2', '\x2', 
		'\x2', '\x12D', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x131', 
		'\x3', '\x2', '\x2', '\x2', '\x12F', '\x131', '\a', '\x5', '\x2', '\x2', 
		'\x130', '\x103', '\x3', '\x2', '\x2', '\x2', '\x130', '\x10B', '\x3', 
		'\x2', '\x2', '\x2', '\x130', '\x111', '\x3', '\x2', '\x2', '\x2', '\x130', 
		'\x112', '\x3', '\x2', '\x2', '\x2', '\x130', '\x113', '\x3', '\x2', '\x2', 
		'\x2', '\x130', '\x114', '\x3', '\x2', '\x2', '\x2', '\x130', '\x115', 
		'\x3', '\x2', '\x2', '\x2', '\x130', '\x116', '\x3', '\x2', '\x2', '\x2', 
		'\x130', '\x117', '\x3', '\x2', '\x2', '\x2', '\x130', '\x118', '\x3', 
		'\x2', '\x2', '\x2', '\x130', '\x119', '\x3', '\x2', '\x2', '\x2', '\x130', 
		'\x11A', '\x3', '\x2', '\x2', '\x2', '\x130', '\x11E', '\x3', '\x2', '\x2', 
		'\x2', '\x130', '\x127', '\x3', '\x2', '\x2', '\x2', '\x130', '\x128', 
		'\x3', '\x2', '\x2', '\x2', '\x130', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\x131', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x132', '\x133', '\x5', 
		'\x1E', '\x10', '\x2', '\x133', '\x134', '\a', ' ', '\x2', '\x2', '\x134', 
		'\x135', '\x5', '\x1E', '\x10', '\x2', '\x135', '\x136', '\a', '@', '\x2', 
		'\x2', '\x136', '\x137', '\x5', '\x1E', '\x10', '\x2', '\x137', '\x17C', 
		'\x3', '\x2', '\x2', '\x2', '\x138', '\x139', '\a', '\x31', '\x2', '\x2', 
		'\x139', '\x13A', '\a', '\x39', '\x2', '\x2', '\x13A', '\x13B', '\x5', 
		'(', '\x15', '\x2', '\x13B', '\x13C', '\a', ':', '\x2', '\x2', '\x13C', 
		'\x13D', '\a', '@', '\x2', '\x2', '\x13D', '\x13E', '\x5', '\x1E', '\x10', 
		'\x2', '\x13E', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x144', 
		'\x5', '\x1E', '\x10', '\x2', '\x140', '\x144', '\x5', '\"', '\x12', '\x2', 
		'\x141', '\x144', '\x5', '(', '\x15', '\x2', '\x142', '\x144', '\x5', 
		'*', '\x16', '\x2', '\x143', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x143', 
		'\x140', '\x3', '\x2', '\x2', '\x2', '\x143', '\x141', '\x3', '\x2', '\x2', 
		'\x2', '\x143', '\x142', '\x3', '\x2', '\x2', '\x2', '\x144', '\x145', 
		'\x3', '\x2', '\x2', '\x2', '\x145', '\x14A', '\t', '\x4', '\x2', '\x2', 
		'\x146', '\x14B', '\x5', '\x1E', '\x10', '\x2', '\x147', '\x14B', '\x5', 
		'\"', '\x12', '\x2', '\x148', '\x14B', '\x5', '(', '\x15', '\x2', '\x149', 
		'\x14B', '\x5', '*', '\x16', '\x2', '\x14A', '\x146', '\x3', '\x2', '\x2', 
		'\x2', '\x14A', '\x147', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x148', 
		'\x3', '\x2', '\x2', '\x2', '\x14A', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'\x14B', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', '\a', 
		';', '\x2', '\x2', '\x14D', '\x152', '\x5', '\x1E', '\x10', '\x2', '\x14E', 
		'\x14F', '\t', '\x5', '\x2', '\x2', '\x14F', '\x151', '\x5', '\x1E', '\x10', 
		'\x2', '\x150', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x151', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '\x152', '\x150', '\x3', '\x2', '\x2', '\x2', 
		'\x152', '\x153', '\x3', '\x2', '\x2', '\x2', '\x153', '\x155', '\x3', 
		'\x2', '\x2', '\x2', '\x154', '\x152', '\x3', '\x2', '\x2', '\x2', '\x155', 
		'\x156', '\a', '<', '\x2', '\x2', '\x156', '\x17C', '\x3', '\x2', '\x2', 
		'\x2', '\x157', '\x159', '\a', '?', '\x2', '\x2', '\x158', '\x157', '\x3', 
		'\x2', '\x2', '\x2', '\x158', '\x159', '\x3', '\x2', '\x2', '\x2', '\x159', 
		'\x15C', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15D', '\x5', '\x1E', 
		'\x10', '\x2', '\x15B', '\x15D', '\x5', '\"', '\x12', '\x2', '\x15C', 
		'\x15A', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15B', '\x3', '\x2', '\x2', 
		'\x2', '\x15D', '\x168', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x160', 
		'\t', '\x6', '\x2', '\x2', '\x15F', '\x161', '\a', '?', '\x2', '\x2', 
		'\x160', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x160', '\x161', '\x3', 
		'\x2', '\x2', '\x2', '\x161', '\x164', '\x3', '\x2', '\x2', '\x2', '\x162', 
		'\x165', '\x5', '\x1E', '\x10', '\x2', '\x163', '\x165', '\x5', '\"', 
		'\x12', '\x2', '\x164', '\x162', '\x3', '\x2', '\x2', '\x2', '\x164', 
		'\x163', '\x3', '\x2', '\x2', '\x2', '\x165', '\x167', '\x3', '\x2', '\x2', 
		'\x2', '\x166', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x167', '\x16A', 
		'\x3', '\x2', '\x2', '\x2', '\x168', '\x166', '\x3', '\x2', '\x2', '\x2', 
		'\x168', '\x169', '\x3', '\x2', '\x2', '\x2', '\x169', '\x17C', '\x3', 
		'\x2', '\x2', '\x2', '\x16A', '\x168', '\x3', '\x2', '\x2', '\x2', '\x16B', 
		'\x171', '\a', '\x36', '\x2', '\x2', '\x16C', '\x171', '\x5', 'J', '&', 
		'\x2', '\x16D', '\x171', '\x5', 'L', '\'', '\x2', '\x16E', '\x171', '\a', 
		'R', '\x2', '\x2', '\x16F', '\x171', '\a', '(', '\x2', '\x2', '\x170', 
		'\x16B', '\x3', '\x2', '\x2', '\x2', '\x170', '\x16C', '\x3', '\x2', '\x2', 
		'\x2', '\x170', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x170', '\x16E', 
		'\x3', '\x2', '\x2', '\x2', '\x170', '\x16F', '\x3', '\x2', '\x2', '\x2', 
		'\x171', '\x172', '\x3', '\x2', '\x2', '\x2', '\x172', '\x179', '\a', 
		'\x1E', '\x2', '\x2', '\x173', '\x17A', '\x5', '\"', '\x12', '\x2', '\x174', 
		'\x175', '\a', '\x4', '\x2', '\x2', '\x175', '\x176', '\x5', '\x14', '\v', 
		'\x2', '\x176', '\x177', '\a', '\x6', '\x2', '\x2', '\x177', '\x17A', 
		'\x3', '\x2', '\x2', '\x2', '\x178', '\x17A', '\x5', 'L', '\'', '\x2', 
		'\x179', '\x173', '\x3', '\x2', '\x2', '\x2', '\x179', '\x174', '\x3', 
		'\x2', '\x2', '\x2', '\x179', '\x178', '\x3', '\x2', '\x2', '\x2', '\x17A', 
		'\x17C', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x132', '\x3', '\x2', '\x2', 
		'\x2', '\x17B', '\x138', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x143', 
		'\x3', '\x2', '\x2', '\x2', '\x17B', '\x14C', '\x3', '\x2', '\x2', '\x2', 
		'\x17B', '\x158', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x170', '\x3', 
		'\x2', '\x2', '\x2', '\x17C', '!', '\x3', '\x2', '\x2', '\x2', '\x17D', 
		'\x17E', '\t', '\a', '\x2', '\x2', '\x17E', '\x17F', '\a', '\x39', '\x2', 
		'\x2', '\x17F', '\x180', '\x5', '$', '\x13', '\x2', '\x180', '\x181', 
		'\a', ':', '\x2', '\x2', '\x181', '\x186', '\x3', '\x2', '\x2', '\x2', 
		'\x182', '\x183', '\t', '\a', '\x2', '\x2', '\x183', '\x184', '\a', '\x39', 
		'\x2', '\x2', '\x184', '\x186', '\a', ':', '\x2', '\x2', '\x185', '\x17D', 
		'\x3', '\x2', '\x2', '\x2', '\x185', '\x182', '\x3', '\x2', '\x2', '\x2', 
		'\x186', '#', '\x3', '\x2', '\x2', '\x2', '\x187', '\x191', '\x5', '&', 
		'\x14', '\x2', '\x188', '\x18D', '\x5', '\x1E', '\x10', '\x2', '\x189', 
		'\x18A', '\a', '\a', '\x2', '\x2', '\x18A', '\x18C', '\x5', '\x1E', '\x10', 
		'\x2', '\x18B', '\x189', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x18F', 
		'\x3', '\x2', '\x2', '\x2', '\x18D', '\x18B', '\x3', '\x2', '\x2', '\x2', 
		'\x18D', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x191', '\x3', 
		'\x2', '\x2', '\x2', '\x18F', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x190', 
		'\x187', '\x3', '\x2', '\x2', '\x2', '\x190', '\x188', '\x3', '\x2', '\x2', 
		'\x2', '\x191', '%', '\x3', '\x2', '\x2', '\x2', '\x192', '\x193', '\a', 
		'\x32', '\x2', '\x2', '\x193', '\x194', '\a', '\x39', '\x2', '\x2', '\x194', 
		'\x195', '\a', 'R', '\x2', '\x2', '\x195', '\x19B', '\a', 'M', '\x2', 
		'\x2', '\x196', '\x19C', '\a', 'R', '\x2', '\x2', '\x197', '\x19C', '\x5', 
		'J', '&', '\x2', '\x198', '\x19C', '\x5', 'L', '\'', '\x2', '\x199', '\x19C', 
		'\x5', '\"', '\x12', '\x2', '\x19A', '\x19C', '\x5', '&', '\x14', '\x2', 
		'\x19B', '\x196', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x197', '\x3', 
		'\x2', '\x2', '\x2', '\x19B', '\x198', '\x3', '\x2', '\x2', '\x2', '\x19B', 
		'\x199', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x19A', '\x3', '\x2', '\x2', 
		'\x2', '\x19C', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19E', 
		'\a', '>', '\x2', '\x2', '\x19E', '\x19F', '\x5', ' ', '\x11', '\x2', 
		'\x19F', '\x1A0', '\a', ':', '\x2', '\x2', '\x1A0', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x1A1', '\x1A4', '\x5', '\x1E', '\x10', '\x2', '\x1A2', 
		'\x1A4', '\x5', '*', '\x16', '\x2', '\x1A3', '\x1A1', '\x3', '\x2', '\x2', 
		'\x2', '\x1A3', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1AA', 
		'\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A8', '\t', '\b', '\x2', '\x2', 
		'\x1A6', '\x1A9', '\x5', '\x1E', '\x10', '\x2', '\x1A7', '\x1A9', '\x5', 
		'*', '\x16', '\x2', '\x1A8', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1A8', 
		'\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1AB', '\x3', '\x2', '\x2', 
		'\x2', '\x1AA', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AC', 
		'\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AA', '\x3', '\x2', '\x2', '\x2', 
		'\x1AC', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1AD', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x1AE', '\x1B1', '\x5', '\x1E', '\x10', '\x2', '\x1AF', 
		'\x1B0', '\t', '\t', '\x2', '\x2', '\x1B0', '\x1B2', '\x5', '\x1E', '\x10', 
		'\x2', '\x1B1', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B3', 
		'\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B1', '\x3', '\x2', '\x2', '\x2', 
		'\x1B3', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B4', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x1B5', '\x1B6', '\a', '\x1A', '\x2', '\x2', '\x1B6', '\x1B8', 
		'\a', 'R', '\x2', '\x2', '\x1B7', '\x1B9', '\a', '\x3', '\x2', '\x2', 
		'\x1B8', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B9', '\x3', 
		'\x2', '\x2', '\x2', '\x1B9', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1BA', 
		'\x1BB', '\x5', '.', '\x18', '\x2', '\x1BB', '\x1BC', '\a', '\x1B', '\x2', 
		'\x2', '\x1BC', '\x1BD', '\a', '\x3', '\x2', '\x2', '\x1BD', '-', '\x3', 
		'\x2', '\x2', '\x2', '\x1BE', '\x1C0', '\x5', '\x34', '\x1B', '\x2', '\x1BF', 
		'\x1BE', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1C3', '\x3', '\x2', '\x2', 
		'\x2', '\x1C1', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C2', 
		'\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C5', '\x3', '\x2', '\x2', '\x2', 
		'\x1C3', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C6', '\x5', 
		'\x30', '\x19', '\x2', '\x1C5', '\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1C5', 
		'\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1C8', '\x3', '\x2', '\x2', 
		'\x2', '\x1C7', '\x1C9', '\x5', '\x32', '\x1A', '\x2', '\x1C8', '\x1C7', 
		'\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C9', '\x3', '\x2', '\x2', '\x2', 
		'\x1C9', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1CC', '\x5', 
		'@', '!', '\x2', '\x1CB', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CB', 
		'\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1CE', '\x3', '\x2', '\x2', 
		'\x2', '\x1CD', '\x1CF', '\x5', '<', '\x1F', '\x2', '\x1CE', '\x1CD', 
		'\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CF', '\x3', '\x2', '\x2', '\x2', 
		'\x1CF', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1D2', '\x5', 
		'\x42', '\"', '\x2', '\x1D1', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1D1', 
		'\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D4', '\x3', '\x2', '\x2', 
		'\x2', '\x1D3', '\x1D5', '\x5', '\x18', '\r', '\x2', '\x1D4', '\x1D3', 
		'\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D5', '\x3', '\x2', '\x2', '\x2', 
		'\x1D5', '/', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D8', '\a', '\x17', 
		'\x2', '\x2', '\x1D7', '\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D8', 
		'\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1D9', '\x3', '\x2', '\x2', '\x2', 
		'\x1D9', '\x1DA', '\a', '*', '\x2', '\x2', '\x1DA', '\x1DB', '\a', '!', 
		'\x2', '\x2', '\x1DB', '\x1DC', '\a', '\x39', '\x2', '\x2', '\x1DC', '\x1DD', 
		'\a', 'R', '\x2', '\x2', '\x1DD', '\x1DF', '\a', ':', '\x2', '\x2', '\x1DE', 
		'\x1E0', '\a', '\x3', '\x2', '\x2', '\x1DF', '\x1DE', '\x3', '\x2', '\x2', 
		'\x2', '\x1DF', '\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1E4', 
		'\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1E3', '\x5', '\x34', '\x1B', '\x2', 
		'\x1E2', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E6', '\x3', 
		'\x2', '\x2', '\x2', '\x1E4', '\x1E2', '\x3', '\x2', '\x2', '\x2', '\x1E4', 
		'\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1E5', '\x1F9', '\x3', '\x2', '\x2', 
		'\x2', '\x1E6', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1E9', 
		'\a', '\x17', '\x2', '\x2', '\x1E8', '\x1E7', '\x3', '\x2', '\x2', '\x2', 
		'\x1E8', '\x1E9', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1EA', '\x3', 
		'\x2', '\x2', '\x2', '\x1EA', '\x1EB', '\a', '*', '\x2', '\x2', '\x1EB', 
		'\x1EC', '\a', '!', '\x2', '\x2', '\x1EC', '\x1ED', '\a', '\x39', '\x2', 
		'\x2', '\x1ED', '\x1EE', '\x5', ':', '\x1E', '\x2', '\x1EE', '\x1F0', 
		'\a', ':', '\x2', '\x2', '\x1EF', '\x1F1', '\a', '\x3', '\x2', '\x2', 
		'\x1F0', '\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1F1', '\x3', 
		'\x2', '\x2', '\x2', '\x1F1', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1F2', 
		'\x1F4', '\x5', '\x34', '\x1B', '\x2', '\x1F3', '\x1F2', '\x3', '\x2', 
		'\x2', '\x2', '\x1F4', '\x1F7', '\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1F3', 
		'\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1F6', '\x3', '\x2', '\x2', '\x2', 
		'\x1F6', '\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F5', '\x3', 
		'\x2', '\x2', '\x2', '\x1F8', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1F8', 
		'\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1F9', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x1FA', '\x1FB', '\a', ')', '\x2', '\x2', '\x1FB', '\x1FC', '\a', 
		'!', '\x2', '\x2', '\x1FC', '\x1FD', '\a', '\x39', '\x2', '\x2', '\x1FD', 
		'\x1FE', '\a', 'R', '\x2', '\x2', '\x1FE', '\x1FF', '\a', ':', '\x2', 
		'\x2', '\x1FF', '\x203', '\a', '\x3', '\x2', '\x2', '\x200', '\x202', 
		'\x5', '\x34', '\x1B', '\x2', '\x201', '\x200', '\x3', '\x2', '\x2', '\x2', 
		'\x202', '\x205', '\x3', '\x2', '\x2', '\x2', '\x203', '\x201', '\x3', 
		'\x2', '\x2', '\x2', '\x203', '\x204', '\x3', '\x2', '\x2', '\x2', '\x204', 
		'\x213', '\x3', '\x2', '\x2', '\x2', '\x205', '\x203', '\x3', '\x2', '\x2', 
		'\x2', '\x206', '\x207', '\a', ')', '\x2', '\x2', '\x207', '\x208', '\a', 
		'!', '\x2', '\x2', '\x208', '\x209', '\a', '\x39', '\x2', '\x2', '\x209', 
		'\x20A', '\x5', ':', '\x1E', '\x2', '\x20A', '\x20B', '\a', ':', '\x2', 
		'\x2', '\x20B', '\x20F', '\a', '\x3', '\x2', '\x2', '\x20C', '\x20E', 
		'\x5', '\x34', '\x1B', '\x2', '\x20D', '\x20C', '\x3', '\x2', '\x2', '\x2', 
		'\x20E', '\x211', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x20D', '\x3', 
		'\x2', '\x2', '\x2', '\x20F', '\x210', '\x3', '\x2', '\x2', '\x2', '\x210', 
		'\x213', '\x3', '\x2', '\x2', '\x2', '\x211', '\x20F', '\x3', '\x2', '\x2', 
		'\x2', '\x212', '\x1FA', '\x3', '\x2', '\x2', '\x2', '\x212', '\x206', 
		'\x3', '\x2', '\x2', '\x2', '\x213', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x214', '\x217', '\a', 'R', '\x2', '\x2', '\x215', '\x217', '\x5', 'J', 
		'&', '\x2', '\x216', '\x214', '\x3', '\x2', '\x2', '\x2', '\x216', '\x215', 
		'\x3', '\x2', '\x2', '\x2', '\x217', '\x218', '\x3', '\x2', '\x2', '\x2', 
		'\x218', '\x219', '\a', '=', '\x2', '\x2', '\x219', '\x21A', '\x5', '\x36', 
		'\x1C', '\x2', '\x21A', '\x21C', '\x5', '\b', '\x5', '\x2', '\x21B', '\x21D', 
		'\x5', '\x38', '\x1D', '\x2', '\x21C', '\x21B', '\x3', '\x2', '\x2', '\x2', 
		'\x21C', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x21D', '\x21E', '\x3', 
		'\x2', '\x2', '\x2', '\x21E', '\x21F', '\a', '\x3', '\x2', '\x2', '\x21F', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x220', '\x222', '\a', '#', '\x2', 
		'\x2', '\x221', '\x220', '\x3', '\x2', '\x2', '\x2', '\x221', '\x222', 
		'\x3', '\x2', '\x2', '\x2', '\x222', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x223', '\x226', '\a', 'J', '\x2', '\x2', '\x224', '\x227', '\x5', '\x1E', 
		'\x10', '\x2', '\x225', '\x227', '\x5', '\x1C', '\xF', '\x2', '\x226', 
		'\x224', '\x3', '\x2', '\x2', '\x2', '\x226', '\x225', '\x3', '\x2', '\x2', 
		'\x2', '\x227', '\x39', '\x3', '\x2', '\x2', '\x2', '\x228', '\x229', 
		'\a', '\"', '\x2', '\x2', '\x229', '\x22A', '\a', '\x39', '\x2', '\x2', 
		'\x22A', '\x22B', '\x5', '\x14', '\v', '\x2', '\x22B', '\x22C', '\a', 
		':', '\x2', '\x2', '\x22C', ';', '\x3', '\x2', '\x2', '\x2', '\x22D', 
		'\x22F', '\a', '\x1F', '\x2', '\x2', '\x22E', '\x230', '\x5', '>', ' ', 
		'\x2', '\x22F', '\x22E', '\x3', '\x2', '\x2', '\x2', '\x230', '\x231', 
		'\x3', '\x2', '\x2', '\x2', '\x231', '\x22F', '\x3', '\x2', '\x2', '\x2', 
		'\x231', '\x232', '\x3', '\x2', '\x2', '\x2', '\x232', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x233', '\x234', '\a', 'R', '\x2', '\x2', '\x234', '\x237', 
		'\a', '=', '\x2', '\x2', '\x235', '\x238', '\a', 'R', '\x2', '\x2', '\x236', 
		'\x238', '\x5', '\f', '\a', '\x2', '\x237', '\x235', '\x3', '\x2', '\x2', 
		'\x2', '\x237', '\x236', '\x3', '\x2', '\x2', '\x2', '\x238', '\x239', 
		'\x3', '\x2', '\x2', '\x2', '\x239', '\x23A', '\a', '\x1D', '\x2', '\x2', 
		'\x23A', '\x23B', '\a', 'R', '\x2', '\x2', '\x23B', '\x23C', '\a', '\x3', 
		'\x2', '\x2', '\x23C', '?', '\x3', '\x2', '\x2', '\x2', '\x23D', '\x23F', 
		'\a', '\x19', '\x2', '\x2', '\x23E', '\x240', '\x5', '\x34', '\x1B', '\x2', 
		'\x23F', '\x23E', '\x3', '\x2', '\x2', '\x2', '\x240', '\x241', '\x3', 
		'\x2', '\x2', '\x2', '\x241', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x241', 
		'\x242', '\x3', '\x2', '\x2', '\x2', '\x242', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x243', '\x245', '\a', '-', '\x2', '\x2', '\x244', '\x246', '\x5', 
		'\x44', '#', '\x2', '\x245', '\x244', '\x3', '\x2', '\x2', '\x2', '\x246', 
		'\x247', '\x3', '\x2', '\x2', '\x2', '\x247', '\x245', '\x3', '\x2', '\x2', 
		'\x2', '\x247', '\x248', '\x3', '\x2', '\x2', '\x2', '\x248', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x249', '\x24A', '\a', 'R', '\x2', '\x2', 
		'\x24A', '\x24D', '\a', '=', '\x2', '\x2', '\x24B', '\x24E', '\a', 'R', 
		'\x2', '\x2', '\x24C', '\x24E', '\x5', '\x14', '\v', '\x2', '\x24D', '\x24B', 
		'\x3', '\x2', '\x2', '\x2', '\x24D', '\x24C', '\x3', '\x2', '\x2', '\x2', 
		'\x24E', '\x24F', '\x3', '\x2', '\x2', '\x2', '\x24F', '\x250', '\a', 
		'\x3', '\x2', '\x2', '\x250', '\x45', '\x3', '\x2', '\x2', '\x2', '\x251', 
		'\x252', '\a', '\b', '\x2', '\x2', '\x252', '\x253', '\x5', 'H', '%', 
		'\x2', '\x253', '\x254', '\a', '\t', '\x2', '\x2', '\x254', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\x255', '\x257', '\v', '\x2', '\x2', '\x2', '\x256', 
		'\x255', '\x3', '\x2', '\x2', '\x2', '\x257', '\x25A', '\x3', '\x2', '\x2', 
		'\x2', '\x258', '\x259', '\x3', '\x2', '\x2', '\x2', '\x258', '\x256', 
		'\x3', '\x2', '\x2', '\x2', '\x259', 'I', '\x3', '\x2', '\x2', '\x2', 
		'\x25A', '\x258', '\x3', '\x2', '\x2', '\x2', '\x25B', '\x25C', '\a', 
		'(', '\x2', '\x2', '\x25C', '\x25E', '\a', '\n', '\x2', '\x2', '\x25D', 
		'\x25B', '\x3', '\x2', '\x2', '\x2', '\x25D', '\x25E', '\x3', '\x2', '\x2', 
		'\x2', '\x25E', '\x261', '\x3', '\x2', '\x2', '\x2', '\x25F', '\x262', 
		'\a', 'R', '\x2', '\x2', '\x260', '\x262', '\x5', 'L', '\'', '\x2', '\x261', 
		'\x25F', '\x3', '\x2', '\x2', '\x2', '\x261', '\x260', '\x3', '\x2', '\x2', 
		'\x2', '\x262', '\x26A', '\x3', '\x2', '\x2', '\x2', '\x263', '\x266', 
		'\a', '\n', '\x2', '\x2', '\x264', '\x267', '\a', 'R', '\x2', '\x2', '\x265', 
		'\x267', '\x5', 'L', '\'', '\x2', '\x266', '\x264', '\x3', '\x2', '\x2', 
		'\x2', '\x266', '\x265', '\x3', '\x2', '\x2', '\x2', '\x267', '\x269', 
		'\x3', '\x2', '\x2', '\x2', '\x268', '\x263', '\x3', '\x2', '\x2', '\x2', 
		'\x269', '\x26C', '\x3', '\x2', '\x2', '\x2', '\x26A', '\x268', '\x3', 
		'\x2', '\x2', '\x2', '\x26A', '\x26B', '\x3', '\x2', '\x2', '\x2', '\x26B', 
		'K', '\x3', '\x2', '\x2', '\x2', '\x26C', '\x26A', '\x3', '\x2', '\x2', 
		'\x2', '\x26D', '\x272', '\x5', 'N', '(', '\x2', '\x26E', '\x272', '\a', 
		'R', '\x2', '\x2', '\x26F', '\x272', '\x5', '\"', '\x12', '\x2', '\x270', 
		'\x272', '\a', '(', '\x2', '\x2', '\x271', '\x26D', '\x3', '\x2', '\x2', 
		'\x2', '\x271', '\x26E', '\x3', '\x2', '\x2', '\x2', '\x271', '\x26F', 
		'\x3', '\x2', '\x2', '\x2', '\x271', '\x270', '\x3', '\x2', '\x2', '\x2', 
		'\x272', '\x278', '\x3', '\x2', '\x2', '\x2', '\x273', '\x276', '\a', 
		'\v', '\x2', '\x2', '\x274', '\x277', '\x5', 'N', '(', '\x2', '\x275', 
		'\x277', '\a', 'R', '\x2', '\x2', '\x276', '\x274', '\x3', '\x2', '\x2', 
		'\x2', '\x276', '\x275', '\x3', '\x2', '\x2', '\x2', '\x277', '\x279', 
		'\x3', '\x2', '\x2', '\x2', '\x278', '\x273', '\x3', '\x2', '\x2', '\x2', 
		'\x279', '\x27A', '\x3', '\x2', '\x2', '\x2', '\x27A', '\x278', '\x3', 
		'\x2', '\x2', '\x2', '\x27A', '\x27B', '\x3', '\x2', '\x2', '\x2', '\x27B', 
		'M', '\x3', '\x2', '\x2', '\x2', '\x27C', '\x27D', '\a', 'R', '\x2', '\x2', 
		'\x27D', '\x27E', '\a', '\x4', '\x2', '\x2', '\x27E', '\x27F', '\t', '\n', 
		'\x2', '\x2', '\x27F', '\x285', '\a', '\x6', '\x2', '\x2', '\x280', '\x281', 
		'\a', '(', '\x2', '\x2', '\x281', '\x282', '\a', '\x4', '\x2', '\x2', 
		'\x282', '\x283', '\t', '\n', '\x2', '\x2', '\x283', '\x285', '\a', '\x6', 
		'\x2', '\x2', '\x284', '\x27C', '\x3', '\x2', '\x2', '\x2', '\x284', '\x280', 
		'\x3', '\x2', '\x2', '\x2', '\x285', 'O', '\x3', '\x2', '\x2', '\x2', 
		'R', 'V', '\\', '\x62', 'o', 'r', 'v', '\x88', '\x90', '\x98', '\xA0', 
		'\xAB', '\xB7', '\xC0', '\xC6', '\xCB', '\xE3', '\xEB', '\xEE', '\xF6', 
		'\x101', '\x105', '\x10B', '\x124', '\x12D', '\x130', '\x143', '\x14A', 
		'\x152', '\x158', '\x15C', '\x160', '\x164', '\x168', '\x170', '\x179', 
		'\x17B', '\x185', '\x18D', '\x190', '\x19B', '\x1A3', '\x1A8', '\x1AC', 
		'\x1B3', '\x1B8', '\x1C1', '\x1C5', '\x1C8', '\x1CB', '\x1CE', '\x1D1', 
		'\x1D4', '\x1D7', '\x1DF', '\x1E4', '\x1E8', '\x1F0', '\x1F5', '\x1F8', 
		'\x203', '\x20F', '\x212', '\x216', '\x21C', '\x221', '\x226', '\x231', 
		'\x237', '\x241', '\x247', '\x24D', '\x258', '\x25D', '\x261', '\x266', 
		'\x26A', '\x271', '\x276', '\x27A', '\x284',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Express
