//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./ANTLR/Express.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Express {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class ExpressParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		BOOLEAN=10, INTEGER=11, LIST=12, LOGICAL=13, REAL=14, SET=15, STRING_SIZED=16, 
		FIXED=17, STRING=18, ARRAY=19, ABSTRACT=20, AND=21, DERIVE=22, ENTITY=23, 
		END_ENTITY=24, ENUMERATION=25, FOR=26, IN=27, INVERSE=28, OF=29, ONEOF=30, 
		OPTIONAL=31, OR=32, SCHEMA=33, END_SCHEMA=34, SELECT=35, SELF=36, SUBTYPE=37, 
		SUPERTYPE=38, TYPE=39, END_TYPE=40, UNIQUE=41, EXISTS=42, SIZEOF=43, QUERY=44, 
		TYPEOF=45, ABS=46, USEDIN=47, IfcType=48, Version=49, Integer=50, LP=51, 
		RP=52, LB=53, RB=54, COLON=55, PIPE=56, NOT=57, EQ=58, GT=59, LT=60, GTE=61, 
		LTE=62, NEQ=63, MUL=64, DIV=65, ADD=66, SUB=67, DEF=68, INIT=69, Float=70, 
		SetAccessor=71, Path=72, PropertyAccessor=73, Identifier=74, Rules=75, 
		Functions=76, WS=77, Comments=78;
	public const int
		RULE_schema_declaration = 0, RULE_type_declaration = 1, RULE_type_name = 2, 
		RULE_value_type = 3, RULE_set_declaration = 4, RULE_set_size = 5, RULE_list_declaration = 6, 
		RULE_list_size = 7, RULE_array_declaration = 8, RULE_array_size = 9, RULE_enumeration = 10, 
		RULE_enum_id_list = 11, RULE_select = 12, RULE_select_id_list = 13, RULE_id_list = 14, 
		RULE_type_declaration_body = 15, RULE_rule_declaration = 16, RULE_rule = 17, 
		RULE_expr = 18, RULE_func_call_expr = 19, RULE_func_parameters = 20, RULE_query_expr = 21, 
		RULE_bool_expr = 22, RULE_formula_expr = 23, RULE_atom = 24, RULE_self_property = 25, 
		RULE_entity_declaration = 26, RULE_entity_name = 27, RULE_entity_declaration_body = 28, 
		RULE_supertype_declaration = 29, RULE_supertype_name = 30, RULE_subtype_declaration = 31, 
		RULE_subtype_name = 32, RULE_attribute = 33, RULE_attribute_name = 34, 
		RULE_definition = 35, RULE_one_of = 36, RULE_inverse_declaration = 37, 
		RULE_derive_declaration = 38, RULE_unique_declaration = 39, RULE_unique_statement = 40, 
		RULE_function_declaration = 41, RULE_function_declaration_body = 42;
	public static readonly string[] ruleNames = {
		"schema_declaration", "type_declaration", "type_name", "value_type", "set_declaration", 
		"set_size", "list_declaration", "list_size", "array_declaration", "array_size", 
		"enumeration", "enum_id_list", "select", "select_id_list", "id_list", 
		"type_declaration_body", "rule_declaration", "rule", "expr", "func_call_expr", 
		"func_parameters", "query_expr", "bool_expr", "formula_expr", "atom", 
		"self_property", "entity_declaration", "entity_name", "entity_declaration_body", 
		"supertype_declaration", "supertype_name", "subtype_declaration", "subtype_name", 
		"attribute", "attribute_name", "definition", "one_of", "inverse_declaration", 
		"derive_declaration", "unique_declaration", "unique_statement", "function_declaration", 
		"function_declaration_body"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'['", "'?'", "']'", "','", "'WHERE'", "'.'", "'FUNCTION'", 
		"'END_FUNCTION'", "'BOOLEAN'", "'INTEGER'", "'LIST'", "'LOGICAL'", "'REAL'", 
		"'SET'", null, "'FIXED'", "'STRING'", "'ARRAY'", "'ABSTRACT'", "'AND'", 
		"'DERIVE'", "'ENTITY'", "'END_ENTITY'", "'ENUMERATION'", "'FOR'", "'IN'", 
		"'INVERSE'", "'OF'", "'ONEOF'", "'OPTIONAL'", "'OR'", "'SCHEMA'", "'END_SCHEMA'", 
		"'SELECT'", "'SELF'", "'SUBTYPE'", "'SUPERTYPE'", "'TYPE'", "'END_TYPE'", 
		"'UNIQUE'", "'EXISTS'", "'SIZEOF'", "'QUERY'", "'TYPEOF'", "'ABS'", "'USEDIN'", 
		null, null, null, "'('", "')'", "'{'", "'}'", "':'", "'|'", "'NOT'", "'='", 
		"'>'", "'<'", "'>='", "'<='", "'<>'", "'*'", "'/'", "'+'", "'-'", "':='", 
		"'<*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "BOOLEAN", 
		"INTEGER", "LIST", "LOGICAL", "REAL", "SET", "STRING_SIZED", "FIXED", 
		"STRING", "ARRAY", "ABSTRACT", "AND", "DERIVE", "ENTITY", "END_ENTITY", 
		"ENUMERATION", "FOR", "IN", "INVERSE", "OF", "ONEOF", "OPTIONAL", "OR", 
		"SCHEMA", "END_SCHEMA", "SELECT", "SELF", "SUBTYPE", "SUPERTYPE", "TYPE", 
		"END_TYPE", "UNIQUE", "EXISTS", "SIZEOF", "QUERY", "TYPEOF", "ABS", "USEDIN", 
		"IfcType", "Version", "Integer", "LP", "RP", "LB", "RB", "COLON", "PIPE", 
		"NOT", "EQ", "GT", "LT", "GTE", "LTE", "NEQ", "MUL", "DIV", "ADD", "SUB", 
		"DEF", "INIT", "Float", "SetAccessor", "Path", "PropertyAccessor", "Identifier", 
		"Rules", "Functions", "WS", "Comments"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Express.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExpressParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExpressParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExpressParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class Schema_declarationContext : ParserRuleContext {
		public ITerminalNode SCHEMA() { return GetToken(ExpressParser.SCHEMA, 0); }
		public ITerminalNode Version() { return GetToken(ExpressParser.Version, 0); }
		public ITerminalNode END_SCHEMA() { return GetToken(ExpressParser.END_SCHEMA, 0); }
		public ITerminalNode Eof() { return GetToken(ExpressParser.Eof, 0); }
		public Type_declarationContext[] type_declaration() {
			return GetRuleContexts<Type_declarationContext>();
		}
		public Type_declarationContext type_declaration(int i) {
			return GetRuleContext<Type_declarationContext>(i);
		}
		public Entity_declarationContext[] entity_declaration() {
			return GetRuleContexts<Entity_declarationContext>();
		}
		public Entity_declarationContext entity_declaration(int i) {
			return GetRuleContext<Entity_declarationContext>(i);
		}
		public Function_declarationContext[] function_declaration() {
			return GetRuleContexts<Function_declarationContext>();
		}
		public Function_declarationContext function_declaration(int i) {
			return GetRuleContext<Function_declarationContext>(i);
		}
		public Schema_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSchema_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSchema_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Schema_declarationContext schema_declaration() {
		Schema_declarationContext _localctx = new Schema_declarationContext(Context, State);
		EnterRule(_localctx, 0, RULE_schema_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; Match(SCHEMA);
			State = 87; Match(Version);
			State = 88; Match(T__0);
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TYPE) {
				{
				{
				State = 89; type_declaration();
				}
				}
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ENTITY) {
				{
				{
				State = 95; entity_declaration();
				}
				}
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 101; function_declaration();
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 107; Match(END_SCHEMA);
			State = 108; Match(T__0);
			State = 109; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declarationContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(ExpressParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(ExpressParser.EQ, 0); }
		public ITerminalNode END_TYPE() { return GetToken(ExpressParser.END_TYPE, 0); }
		public Value_typeContext value_type() {
			return GetRuleContext<Value_typeContext>(0);
		}
		public EnumerationContext enumeration() {
			return GetRuleContext<EnumerationContext>(0);
		}
		public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		public ITerminalNode FIXED() { return GetToken(ExpressParser.FIXED, 0); }
		public Type_declaration_bodyContext type_declaration_body() {
			return GetRuleContext<Type_declaration_bodyContext>(0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterType_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitType_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Type_declarationContext type_declaration() {
		Type_declarationContext _localctx = new Type_declarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_type_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; Match(TYPE);
			State = 112; type_name();
			State = 113; Match(EQ);
			State = 117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case INTEGER:
			case LIST:
			case LOGICAL:
			case REAL:
			case SET:
			case STRING_SIZED:
			case STRING:
			case ARRAY:
			case Identifier:
				{
				State = 114; value_type();
				}
				break;
			case ENUMERATION:
				{
				State = 115; enumeration();
				}
				break;
			case SELECT:
				{
				State = 116; select();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FIXED) {
				{
				State = 119; Match(FIXED);
				}
			}

			State = 122; Match(T__0);
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 123; type_declaration_body();
				}
			}

			State = 126; Match(END_TYPE);
			State = 127; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 4, RULE_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_typeContext : ParserRuleContext {
		public ITerminalNode BOOLEAN() { return GetToken(ExpressParser.BOOLEAN, 0); }
		public ITerminalNode INTEGER() { return GetToken(ExpressParser.INTEGER, 0); }
		public ITerminalNode LOGICAL() { return GetToken(ExpressParser.LOGICAL, 0); }
		public ITerminalNode REAL() { return GetToken(ExpressParser.REAL, 0); }
		public ITerminalNode STRING() { return GetToken(ExpressParser.STRING, 0); }
		public ITerminalNode STRING_SIZED() { return GetToken(ExpressParser.STRING_SIZED, 0); }
		public Set_declarationContext set_declaration() {
			return GetRuleContext<Set_declarationContext>(0);
		}
		public List_declarationContext list_declaration() {
			return GetRuleContext<List_declarationContext>(0);
		}
		public Array_declarationContext array_declaration() {
			return GetRuleContext<Array_declarationContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public Value_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterValue_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitValue_type(this);
		}
	}

	[RuleVersion(0)]
	public Value_typeContext value_type() {
		Value_typeContext _localctx = new Value_typeContext(Context, State);
		EnterRule(_localctx, 6, RULE_value_type);
		try {
			State = 141;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131; Match(BOOLEAN);
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132; Match(INTEGER);
				}
				break;
			case LOGICAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 133; Match(LOGICAL);
				}
				break;
			case REAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 134; Match(REAL);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 5);
				{
				State = 135; Match(STRING);
				}
				break;
			case STRING_SIZED:
				EnterOuterAlt(_localctx, 6);
				{
				State = 136; Match(STRING_SIZED);
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 7);
				{
				State = 137; set_declaration();
				}
				break;
			case LIST:
				EnterOuterAlt(_localctx, 8);
				{
				State = 138; list_declaration();
				}
				break;
			case ARRAY:
				EnterOuterAlt(_localctx, 9);
				{
				State = 139; array_declaration();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 10);
				{
				State = 140; Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_declarationContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(ExpressParser.SET, 0); }
		public ITerminalNode Integer() { return GetToken(ExpressParser.Integer, 0); }
		public ITerminalNode COLON() { return GetToken(ExpressParser.COLON, 0); }
		public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		public Value_typeContext value_type() {
			return GetRuleContext<Value_typeContext>(0);
		}
		public Set_sizeContext set_size() {
			return GetRuleContext<Set_sizeContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(ExpressParser.FOR, 0); }
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public Set_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSet_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSet_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Set_declarationContext set_declaration() {
		Set_declarationContext _localctx = new Set_declarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_set_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; Match(SET);
			State = 144; Match(T__1);
			State = 145; Match(Integer);
			State = 146; Match(COLON);
			State = 149;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integer:
				{
				State = 147; set_size();
				}
				break;
			case T__2:
				{
				State = 148; Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 151; Match(T__3);
			State = 152; Match(OF);
			State = 153; value_type();
			State = 156;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 154; Match(FOR);
				State = 155; Match(Identifier);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_sizeContext : ParserRuleContext {
		public ITerminalNode Integer() { return GetToken(ExpressParser.Integer, 0); }
		public Set_sizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_size; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSet_size(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSet_size(this);
		}
	}

	[RuleVersion(0)]
	public Set_sizeContext set_size() {
		Set_sizeContext _localctx = new Set_sizeContext(Context, State);
		EnterRule(_localctx, 10, RULE_set_size);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; Match(Integer);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_declarationContext : ParserRuleContext {
		public ITerminalNode LIST() { return GetToken(ExpressParser.LIST, 0); }
		public ITerminalNode Integer() { return GetToken(ExpressParser.Integer, 0); }
		public ITerminalNode COLON() { return GetToken(ExpressParser.COLON, 0); }
		public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		public Value_typeContext value_type() {
			return GetRuleContext<Value_typeContext>(0);
		}
		public List_sizeContext list_size() {
			return GetRuleContext<List_sizeContext>(0);
		}
		public List_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterList_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitList_declaration(this);
		}
	}

	[RuleVersion(0)]
	public List_declarationContext list_declaration() {
		List_declarationContext _localctx = new List_declarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_list_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(LIST);
			State = 161; Match(T__1);
			State = 162; Match(Integer);
			State = 163; Match(COLON);
			State = 166;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integer:
				{
				State = 164; list_size();
				}
				break;
			case T__2:
				{
				State = 165; Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 168; Match(T__3);
			State = 169; Match(OF);
			State = 170; value_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_sizeContext : ParserRuleContext {
		public ITerminalNode Integer() { return GetToken(ExpressParser.Integer, 0); }
		public List_sizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_size; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterList_size(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitList_size(this);
		}
	}

	[RuleVersion(0)]
	public List_sizeContext list_size() {
		List_sizeContext _localctx = new List_sizeContext(Context, State);
		EnterRule(_localctx, 14, RULE_list_size);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; Match(Integer);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_declarationContext : ParserRuleContext {
		public ITerminalNode ARRAY() { return GetToken(ExpressParser.ARRAY, 0); }
		public ITerminalNode Integer() { return GetToken(ExpressParser.Integer, 0); }
		public ITerminalNode COLON() { return GetToken(ExpressParser.COLON, 0); }
		public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		public Value_typeContext value_type() {
			return GetRuleContext<Value_typeContext>(0);
		}
		public Array_sizeContext array_size() {
			return GetRuleContext<Array_sizeContext>(0);
		}
		public Array_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterArray_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitArray_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Array_declarationContext array_declaration() {
		Array_declarationContext _localctx = new Array_declarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_array_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; Match(ARRAY);
			State = 175; Match(T__1);
			State = 176; Match(Integer);
			State = 177; Match(COLON);
			State = 180;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integer:
				{
				State = 178; array_size();
				}
				break;
			case T__2:
				{
				State = 179; Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 182; Match(T__3);
			State = 183; Match(OF);
			State = 184; value_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_sizeContext : ParserRuleContext {
		public ITerminalNode Integer() { return GetToken(ExpressParser.Integer, 0); }
		public Array_sizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_size; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterArray_size(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitArray_size(this);
		}
	}

	[RuleVersion(0)]
	public Array_sizeContext array_size() {
		Array_sizeContext _localctx = new Array_sizeContext(Context, State);
		EnterRule(_localctx, 18, RULE_array_size);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; Match(Integer);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationContext : ParserRuleContext {
		public ITerminalNode ENUMERATION() { return GetToken(ExpressParser.ENUMERATION, 0); }
		public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		public ITerminalNode LP() { return GetToken(ExpressParser.LP, 0); }
		public Enum_id_listContext enum_id_list() {
			return GetRuleContext<Enum_id_listContext>(0);
		}
		public ITerminalNode RP() { return GetToken(ExpressParser.RP, 0); }
		public EnumerationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterEnumeration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitEnumeration(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationContext enumeration() {
		EnumerationContext _localctx = new EnumerationContext(Context, State);
		EnterRule(_localctx, 20, RULE_enumeration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188; Match(ENUMERATION);
			State = 189; Match(OF);
			State = 190; Match(LP);
			State = 191; enum_id_list();
			State = 192; Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_id_listContext : ParserRuleContext {
		public Id_listContext id_list() {
			return GetRuleContext<Id_listContext>(0);
		}
		public Enum_id_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_id_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterEnum_id_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitEnum_id_list(this);
		}
	}

	[RuleVersion(0)]
	public Enum_id_listContext enum_id_list() {
		Enum_id_listContext _localctx = new Enum_id_listContext(Context, State);
		EnterRule(_localctx, 22, RULE_enum_id_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; id_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(ExpressParser.SELECT, 0); }
		public ITerminalNode LP() { return GetToken(ExpressParser.LP, 0); }
		public Select_id_listContext select_id_list() {
			return GetRuleContext<Select_id_listContext>(0);
		}
		public ITerminalNode RP() { return GetToken(ExpressParser.RP, 0); }
		public SelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSelect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSelect(this);
		}
	}

	[RuleVersion(0)]
	public SelectContext select() {
		SelectContext _localctx = new SelectContext(Context, State);
		EnterRule(_localctx, 24, RULE_select);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(SELECT);
			State = 197; Match(LP);
			State = 198; select_id_list();
			State = 199; Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_id_listContext : ParserRuleContext {
		public Id_listContext id_list() {
			return GetRuleContext<Id_listContext>(0);
		}
		public Select_id_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_id_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSelect_id_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSelect_id_list(this);
		}
	}

	[RuleVersion(0)]
	public Select_id_listContext select_id_list() {
		Select_id_listContext _localctx = new Select_id_listContext(Context, State);
		EnterRule(_localctx, 26, RULE_select_id_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; id_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_listContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(ExpressParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(ExpressParser.Identifier, i);
		}
		public ITerminalNode[] IfcType() { return GetTokens(ExpressParser.IfcType); }
		public ITerminalNode IfcType(int i) {
			return GetToken(ExpressParser.IfcType, i);
		}
		public Id_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterId_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitId_list(this);
		}
	}

	[RuleVersion(0)]
	public Id_listContext id_list() {
		Id_listContext _localctx = new Id_listContext(Context, State);
		EnterRule(_localctx, 28, RULE_id_list);
		int _la;
		try {
			State = 219;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 203; Match(Identifier);
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 204; Match(T__4);
					State = 205; Match(Identifier);
					}
					}
					State = 210;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case IfcType:
				EnterOuterAlt(_localctx, 2);
				{
				State = 211; Match(IfcType);
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 212; Match(T__4);
					State = 213; Match(IfcType);
					}
					}
					State = 218;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declaration_bodyContext : ParserRuleContext {
		public Rule_declarationContext rule_declaration() {
			return GetRuleContext<Rule_declarationContext>(0);
		}
		public Type_declaration_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterType_declaration_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitType_declaration_body(this);
		}
	}

	[RuleVersion(0)]
	public Type_declaration_bodyContext type_declaration_body() {
		Type_declaration_bodyContext _localctx = new Type_declaration_bodyContext(Context, State);
		EnterRule(_localctx, 30, RULE_type_declaration_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; rule_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_declarationContext : ParserRuleContext {
		public RuleContext[] rule() {
			return GetRuleContexts<RuleContext>();
		}
		public RuleContext rule(int i) {
			return GetRuleContext<RuleContext>(i);
		}
		public Rule_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterRule_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitRule_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Rule_declarationContext rule_declaration() {
		Rule_declarationContext _localctx = new Rule_declarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_rule_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223; Match(T__5);
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 224; rule();
				}
				}
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public ITerminalNode COLON() { return GetToken(ExpressParser.COLON, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitRule(this);
		}
	}

	[RuleVersion(0)]
	public RuleContext rule() {
		RuleContext _localctx = new RuleContext(Context, State);
		EnterRule(_localctx, 34, RULE_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229; Match(Identifier);
			State = 230; Match(COLON);
			State = 231; expr();
			State = 232; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public Func_call_exprContext func_call_expr() {
			return GetRuleContext<Func_call_exprContext>(0);
		}
		public Bool_exprContext bool_expr() {
			return GetRuleContext<Bool_exprContext>(0);
		}
		public ITerminalNode LB() { return GetToken(ExpressParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(ExpressParser.RB, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 36, RULE_expr);
		try {
			State = 240;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 234; func_call_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 235; bool_expr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 236; Match(LB);
				State = 237; bool_expr();
				State = 238; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_call_exprContext : ParserRuleContext {
		public Func_parametersContext func_parameters() {
			return GetRuleContext<Func_parametersContext>(0);
		}
		public ITerminalNode EXISTS() { return GetToken(ExpressParser.EXISTS, 0); }
		public ITerminalNode SIZEOF() { return GetToken(ExpressParser.SIZEOF, 0); }
		public ITerminalNode TYPEOF() { return GetToken(ExpressParser.TYPEOF, 0); }
		public ITerminalNode QUERY() { return GetToken(ExpressParser.QUERY, 0); }
		public ITerminalNode ABS() { return GetToken(ExpressParser.ABS, 0); }
		public ITerminalNode USEDIN() { return GetToken(ExpressParser.USEDIN, 0); }
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public Func_call_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_call_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterFunc_call_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitFunc_call_expr(this);
		}
	}

	[RuleVersion(0)]
	public Func_call_exprContext func_call_expr() {
		Func_call_exprContext _localctx = new Func_call_exprContext(Context, State);
		EnterRule(_localctx, 38, RULE_func_call_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & ((1L << (EXISTS - 42)) | (1L << (SIZEOF - 42)) | (1L << (QUERY - 42)) | (1L << (TYPEOF - 42)) | (1L << (ABS - 42)) | (1L << (USEDIN - 42)) | (1L << (Identifier - 42)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 243; Match(LP);
			State = 244; func_parameters();
			State = 245; Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_parametersContext : ParserRuleContext {
		public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		public Formula_exprContext formula_expr() {
			return GetRuleContext<Formula_exprContext>(0);
		}
		public Func_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterFunc_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitFunc_parameters(this);
		}
	}

	[RuleVersion(0)]
	public Func_parametersContext func_parameters() {
		Func_parametersContext _localctx = new Func_parametersContext(Context, State);
		EnterRule(_localctx, 40, RULE_func_parameters);
		int _la;
		try {
			State = 256;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 247; atom();
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 248; Match(T__4);
					State = 249; atom();
					}
					}
					State = 254;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 255; formula_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_exprContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(ExpressParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(ExpressParser.Identifier, i);
		}
		public ITerminalNode INIT() { return GetToken(ExpressParser.INIT, 0); }
		public ITerminalNode PIPE() { return GetToken(ExpressParser.PIPE, 0); }
		public Bool_exprContext bool_expr() {
			return GetRuleContext<Bool_exprContext>(0);
		}
		public ITerminalNode Path() { return GetToken(ExpressParser.Path, 0); }
		public ITerminalNode PropertyAccessor() { return GetToken(ExpressParser.PropertyAccessor, 0); }
		public Func_call_exprContext func_call_expr() {
			return GetRuleContext<Func_call_exprContext>(0);
		}
		public Query_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterQuery_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitQuery_expr(this);
		}
	}

	[RuleVersion(0)]
	public Query_exprContext query_expr() {
		Query_exprContext _localctx = new Query_exprContext(Context, State);
		EnterRule(_localctx, 42, RULE_query_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258; Match(Identifier);
			State = 259; Match(INIT);
			State = 264;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 260; Match(Identifier);
				}
				break;
			case 2:
				{
				State = 261; Match(Path);
				}
				break;
			case 3:
				{
				State = 262; Match(PropertyAccessor);
				}
				break;
			case 4:
				{
				State = 263; func_call_expr();
				}
				break;
			}
			State = 266; Match(PIPE);
			State = 267; bool_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_exprContext : ParserRuleContext {
		public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		public ITerminalNode[] LT() { return GetTokens(ExpressParser.LT); }
		public ITerminalNode LT(int i) {
			return GetToken(ExpressParser.LT, i);
		}
		public ITerminalNode[] GT() { return GetTokens(ExpressParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(ExpressParser.GT, i);
		}
		public ITerminalNode[] LTE() { return GetTokens(ExpressParser.LTE); }
		public ITerminalNode LTE(int i) {
			return GetToken(ExpressParser.LTE, i);
		}
		public ITerminalNode[] GTE() { return GetTokens(ExpressParser.GTE); }
		public ITerminalNode GTE(int i) {
			return GetToken(ExpressParser.GTE, i);
		}
		public ITerminalNode[] EQ() { return GetTokens(ExpressParser.EQ); }
		public ITerminalNode EQ(int i) {
			return GetToken(ExpressParser.EQ, i);
		}
		public ITerminalNode[] NEQ() { return GetTokens(ExpressParser.NEQ); }
		public ITerminalNode NEQ(int i) {
			return GetToken(ExpressParser.NEQ, i);
		}
		public ITerminalNode[] AND() { return GetTokens(ExpressParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(ExpressParser.AND, i);
		}
		public ITerminalNode[] OR() { return GetTokens(ExpressParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(ExpressParser.OR, i);
		}
		public ITerminalNode IN() { return GetToken(ExpressParser.IN, 0); }
		public ITerminalNode IfcType() { return GetToken(ExpressParser.IfcType, 0); }
		public ITerminalNode Path() { return GetToken(ExpressParser.Path, 0); }
		public ITerminalNode PropertyAccessor() { return GetToken(ExpressParser.PropertyAccessor, 0); }
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public ITerminalNode SELF() { return GetToken(ExpressParser.SELF, 0); }
		public Func_call_exprContext func_call_expr() {
			return GetRuleContext<Func_call_exprContext>(0);
		}
		public Id_listContext id_list() {
			return GetRuleContext<Id_listContext>(0);
		}
		public Bool_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterBool_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitBool_expr(this);
		}
	}

	[RuleVersion(0)]
	public Bool_exprContext bool_expr() {
		Bool_exprContext _localctx = new Bool_exprContext(Context, State);
		EnterRule(_localctx, 44, RULE_bool_expr);
		int _la;
		try {
			int _alt;
			State = 286;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 269; atom();
				State = 274;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 270;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << OR) | (1L << EQ) | (1L << GT) | (1L << LT) | (1L << GTE) | (1L << LTE) | (1L << NEQ))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 271; atom();
						}
						} 
					}
					State = 276;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 36)) & ~0x3f) == 0 && ((1L << (_la - 36)) & ((1L << (SELF - 36)) | (1L << (IfcType - 36)) | (1L << (Path - 36)) | (1L << (PropertyAccessor - 36)) | (1L << (Identifier - 36)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 278; Match(IN);
				State = 284;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case EXISTS:
				case SIZEOF:
				case QUERY:
				case TYPEOF:
				case ABS:
				case USEDIN:
				case Identifier:
					{
					State = 279; func_call_expr();
					}
					break;
				case T__1:
					{
					State = 280; Match(T__1);
					State = 281; id_list();
					State = 282; Match(T__3);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formula_exprContext : ParserRuleContext {
		public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		public ITerminalNode[] ADD() { return GetTokens(ExpressParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(ExpressParser.ADD, i);
		}
		public ITerminalNode[] SUB() { return GetTokens(ExpressParser.SUB); }
		public ITerminalNode SUB(int i) {
			return GetToken(ExpressParser.SUB, i);
		}
		public ITerminalNode[] MUL() { return GetTokens(ExpressParser.MUL); }
		public ITerminalNode MUL(int i) {
			return GetToken(ExpressParser.MUL, i);
		}
		public ITerminalNode[] DIV() { return GetTokens(ExpressParser.DIV); }
		public ITerminalNode DIV(int i) {
			return GetToken(ExpressParser.DIV, i);
		}
		public Formula_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formula_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterFormula_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitFormula_expr(this);
		}
	}

	[RuleVersion(0)]
	public Formula_exprContext formula_expr() {
		Formula_exprContext _localctx = new Formula_exprContext(Context, State);
		EnterRule(_localctx, 46, RULE_formula_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; atom();
			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 289;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (MUL - 64)) | (1L << (DIV - 64)) | (1L << (ADD - 64)) | (1L << (SUB - 64)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 290; atom();
				}
				}
				State = 293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (MUL - 64)) | (1L << (DIV - 64)) | (1L << (ADD - 64)) | (1L << (SUB - 64)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public ITerminalNode SELF() { return GetToken(ExpressParser.SELF, 0); }
		public ITerminalNode IfcType() { return GetToken(ExpressParser.IfcType, 0); }
		public ITerminalNode Integer() { return GetToken(ExpressParser.Integer, 0); }
		public ITerminalNode Float() { return GetToken(ExpressParser.Float, 0); }
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public ITerminalNode Path() { return GetToken(ExpressParser.Path, 0); }
		public ITerminalNode PropertyAccessor() { return GetToken(ExpressParser.PropertyAccessor, 0); }
		public ITerminalNode SetAccessor() { return GetToken(ExpressParser.SetAccessor, 0); }
		public Id_listContext id_list() {
			return GetRuleContext<Id_listContext>(0);
		}
		public Query_exprContext query_expr() {
			return GetRuleContext<Query_exprContext>(0);
		}
		public Func_call_exprContext func_call_expr() {
			return GetRuleContext<Func_call_exprContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(ExpressParser.NOT, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 48, RULE_atom);
		int _la;
		try {
			State = 323;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 295; Match(SELF);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 296; Match(IfcType);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 297; Match(Integer);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 298; Match(Float);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 299; Match(Identifier);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 300; Match(Path);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 301; Match(PropertyAccessor);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 302; Match(SetAccessor);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 303; Match(T__1);
				State = 304; id_list();
				State = 305; Match(T__3);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 307; query_expr();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 308; func_call_expr();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 309; Match(LP);
				State = 311;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 310; Match(NOT);
					}
					break;
				}
				State = 313; expr();
				State = 314; Match(RP);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 316; Match(NOT);
					}
				}

				State = 319; Match(LP);
				State = 320; expr();
				State = 321; Match(RP);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Self_propertyContext : ParserRuleContext {
		public ITerminalNode SELF() { return GetToken(ExpressParser.SELF, 0); }
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public Self_propertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_self_property; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSelf_property(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSelf_property(this);
		}
	}

	[RuleVersion(0)]
	public Self_propertyContext self_property() {
		Self_propertyContext _localctx = new Self_propertyContext(Context, State);
		EnterRule(_localctx, 50, RULE_self_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325; Match(SELF);
			State = 326; Match(T__6);
			State = 327; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_declarationContext : ParserRuleContext {
		public ITerminalNode ENTITY() { return GetToken(ExpressParser.ENTITY, 0); }
		public Entity_nameContext entity_name() {
			return GetRuleContext<Entity_nameContext>(0);
		}
		public Entity_declaration_bodyContext entity_declaration_body() {
			return GetRuleContext<Entity_declaration_bodyContext>(0);
		}
		public ITerminalNode END_ENTITY() { return GetToken(ExpressParser.END_ENTITY, 0); }
		public Entity_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterEntity_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitEntity_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Entity_declarationContext entity_declaration() {
		Entity_declarationContext _localctx = new Entity_declarationContext(Context, State);
		EnterRule(_localctx, 52, RULE_entity_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329; Match(ENTITY);
			State = 330; entity_name();
			State = 332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 331; Match(T__0);
				}
			}

			State = 334; entity_declaration_body();
			State = 335; Match(END_ENTITY);
			State = 336; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_nameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public Entity_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterEntity_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitEntity_name(this);
		}
	}

	[RuleVersion(0)]
	public Entity_nameContext entity_name() {
		Entity_nameContext _localctx = new Entity_nameContext(Context, State);
		EnterRule(_localctx, 54, RULE_entity_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_declaration_bodyContext : ParserRuleContext {
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public Supertype_declarationContext supertype_declaration() {
			return GetRuleContext<Supertype_declarationContext>(0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return GetRuleContext<Subtype_declarationContext>(0);
		}
		public Inverse_declarationContext inverse_declaration() {
			return GetRuleContext<Inverse_declarationContext>(0);
		}
		public Derive_declarationContext derive_declaration() {
			return GetRuleContext<Derive_declarationContext>(0);
		}
		public Rule_declarationContext rule_declaration() {
			return GetRuleContext<Rule_declarationContext>(0);
		}
		public Unique_declarationContext unique_declaration() {
			return GetRuleContext<Unique_declarationContext>(0);
		}
		public Entity_declaration_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_declaration_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterEntity_declaration_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitEntity_declaration_body(this);
		}
	}

	[RuleVersion(0)]
	public Entity_declaration_bodyContext entity_declaration_body() {
		Entity_declaration_bodyContext _localctx = new Entity_declaration_bodyContext(Context, State);
		EnterRule(_localctx, 56, RULE_entity_declaration_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Identifier) {
				{
				{
				State = 340; attribute();
				}
				}
				State = 345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ABSTRACT || _la==SUPERTYPE) {
				{
				State = 346; supertype_declaration();
				}
			}

			State = 350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUBTYPE) {
				{
				State = 349; subtype_declaration();
				}
			}

			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INVERSE) {
				{
				State = 352; inverse_declaration();
				}
			}

			State = 356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DERIVE) {
				{
				State = 355; derive_declaration();
				}
			}

			State = 359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 358; rule_declaration();
				}
			}

			State = 362;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNIQUE) {
				{
				State = 361; unique_declaration();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Supertype_declarationContext : ParserRuleContext {
		public ITerminalNode SUPERTYPE() { return GetToken(ExpressParser.SUPERTYPE, 0); }
		public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		public ITerminalNode LP() { return GetToken(ExpressParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(ExpressParser.RP, 0); }
		public One_ofContext one_of() {
			return GetRuleContext<One_ofContext>(0);
		}
		public Supertype_nameContext supertype_name() {
			return GetRuleContext<Supertype_nameContext>(0);
		}
		public ITerminalNode ABSTRACT() { return GetToken(ExpressParser.ABSTRACT, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public Supertype_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supertype_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSupertype_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSupertype_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Supertype_declarationContext supertype_declaration() {
		Supertype_declarationContext _localctx = new Supertype_declarationContext(Context, State);
		EnterRule(_localctx, 58, RULE_supertype_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ABSTRACT) {
				{
				State = 364; Match(ABSTRACT);
				}
			}

			State = 367; Match(SUPERTYPE);
			State = 368; Match(OF);
			State = 369; Match(LP);
			State = 372;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ONEOF:
				{
				State = 370; one_of();
				}
				break;
			case Identifier:
				{
				State = 371; supertype_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 374; Match(RP);
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 375; Match(T__0);
				}
			}

			State = 381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Identifier) {
				{
				{
				State = 378; attribute();
				}
				}
				State = 383;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Supertype_nameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public Supertype_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supertype_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSupertype_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSupertype_name(this);
		}
	}

	[RuleVersion(0)]
	public Supertype_nameContext supertype_name() {
		Supertype_nameContext _localctx = new Supertype_nameContext(Context, State);
		EnterRule(_localctx, 60, RULE_supertype_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subtype_declarationContext : ParserRuleContext {
		public ITerminalNode SUBTYPE() { return GetToken(ExpressParser.SUBTYPE, 0); }
		public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		public ITerminalNode LP() { return GetToken(ExpressParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(ExpressParser.RP, 0); }
		public One_ofContext one_of() {
			return GetRuleContext<One_ofContext>(0);
		}
		public Subtype_nameContext subtype_name() {
			return GetRuleContext<Subtype_nameContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public Subtype_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtype_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSubtype_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSubtype_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Subtype_declarationContext subtype_declaration() {
		Subtype_declarationContext _localctx = new Subtype_declarationContext(Context, State);
		EnterRule(_localctx, 62, RULE_subtype_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386; Match(SUBTYPE);
			State = 387; Match(OF);
			State = 388; Match(LP);
			State = 391;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ONEOF:
				{
				State = 389; one_of();
				}
				break;
			case Identifier:
				{
				State = 390; subtype_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 393; Match(RP);
			State = 394; Match(T__0);
			State = 398;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Identifier) {
				{
				{
				State = 395; attribute();
				}
				}
				State = 400;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subtype_nameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public Subtype_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtype_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSubtype_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSubtype_name(this);
		}
	}

	[RuleVersion(0)]
	public Subtype_nameContext subtype_name() {
		Subtype_nameContext _localctx = new Subtype_nameContext(Context, State);
		EnterRule(_localctx, 64, RULE_subtype_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public Attribute_nameContext attribute_name() {
			return GetRuleContext<Attribute_nameContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(ExpressParser.COLON, 0); }
		public Value_typeContext value_type() {
			return GetRuleContext<Value_typeContext>(0);
		}
		public ITerminalNode OPTIONAL() { return GetToken(ExpressParser.OPTIONAL, 0); }
		public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 66, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403; attribute_name();
			State = 404; Match(COLON);
			State = 406;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONAL) {
				{
				State = 405; Match(OPTIONAL);
				}
			}

			State = 408; value_type();
			State = 410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEF) {
				{
				State = 409; definition();
				}
			}

			State = 412; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_nameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public Attribute_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterAttribute_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitAttribute_name(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_nameContext attribute_name() {
		Attribute_nameContext _localctx = new Attribute_nameContext(Context, State);
		EnterRule(_localctx, 68, RULE_attribute_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public ITerminalNode DEF() { return GetToken(ExpressParser.DEF, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 70, RULE_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416; Match(DEF);
			State = 417; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class One_ofContext : ParserRuleContext {
		public ITerminalNode ONEOF() { return GetToken(ExpressParser.ONEOF, 0); }
		public ITerminalNode LP() { return GetToken(ExpressParser.LP, 0); }
		public Id_listContext id_list() {
			return GetRuleContext<Id_listContext>(0);
		}
		public ITerminalNode RP() { return GetToken(ExpressParser.RP, 0); }
		public One_ofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_one_of; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterOne_of(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitOne_of(this);
		}
	}

	[RuleVersion(0)]
	public One_ofContext one_of() {
		One_ofContext _localctx = new One_ofContext(Context, State);
		EnterRule(_localctx, 72, RULE_one_of);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419; Match(ONEOF);
			State = 420; Match(LP);
			State = 421; id_list();
			State = 422; Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inverse_declarationContext : ParserRuleContext {
		public ITerminalNode INVERSE() { return GetToken(ExpressParser.INVERSE, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public Inverse_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inverse_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterInverse_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitInverse_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Inverse_declarationContext inverse_declaration() {
		Inverse_declarationContext _localctx = new Inverse_declarationContext(Context, State);
		EnterRule(_localctx, 74, RULE_inverse_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424; Match(INVERSE);
			State = 426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 425; attribute();
				}
				}
				State = 428;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derive_declarationContext : ParserRuleContext {
		public ITerminalNode DERIVE() { return GetToken(ExpressParser.DERIVE, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public Derive_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derive_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterDerive_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitDerive_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Derive_declarationContext derive_declaration() {
		Derive_declarationContext _localctx = new Derive_declarationContext(Context, State);
		EnterRule(_localctx, 76, RULE_derive_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430; Match(DERIVE);
			State = 432;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 431; attribute();
				}
				}
				State = 434;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unique_declarationContext : ParserRuleContext {
		public ITerminalNode UNIQUE() { return GetToken(ExpressParser.UNIQUE, 0); }
		public Unique_statementContext[] unique_statement() {
			return GetRuleContexts<Unique_statementContext>();
		}
		public Unique_statementContext unique_statement(int i) {
			return GetRuleContext<Unique_statementContext>(i);
		}
		public Unique_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unique_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterUnique_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitUnique_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Unique_declarationContext unique_declaration() {
		Unique_declarationContext _localctx = new Unique_declarationContext(Context, State);
		EnterRule(_localctx, 78, RULE_unique_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436; Match(UNIQUE);
			State = 438;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 437; unique_statement();
				}
				}
				State = 440;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unique_statementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public ITerminalNode COLON() { return GetToken(ExpressParser.COLON, 0); }
		public Unique_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unique_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterUnique_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitUnique_statement(this);
		}
	}

	[RuleVersion(0)]
	public Unique_statementContext unique_statement() {
		Unique_statementContext _localctx = new Unique_statementContext(Context, State);
		EnterRule(_localctx, 80, RULE_unique_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 442; Match(Identifier);
			State = 443; Match(COLON);
			State = 447;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 444;
					MatchWildcard();
					}
					} 
				}
				State = 449;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			}
			State = 450; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declarationContext : ParserRuleContext {
		public Function_declaration_bodyContext function_declaration_body() {
			return GetRuleContext<Function_declaration_bodyContext>(0);
		}
		public Function_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterFunction_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitFunction_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Function_declarationContext function_declaration() {
		Function_declarationContext _localctx = new Function_declarationContext(Context, State);
		EnterRule(_localctx, 82, RULE_function_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452; Match(T__7);
			State = 453; function_declaration_body();
			State = 454; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declaration_bodyContext : ParserRuleContext {
		public Function_declaration_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_declaration_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterFunction_declaration_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitFunction_declaration_body(this);
		}
	}

	[RuleVersion(0)]
	public Function_declaration_bodyContext function_declaration_body() {
		Function_declaration_bodyContext _localctx = new Function_declaration_bodyContext(Context, State);
		EnterRule(_localctx, 84, RULE_function_declaration_body);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 456;
					MatchWildcard();
					}
					} 
				}
				State = 461;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'P', '\x1D1', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 
		']', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '`', '\v', '\x2', '\x3', 
		'\x2', '\a', '\x2', '\x63', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x66', 
		'\v', '\x2', '\x3', '\x2', '\a', '\x2', 'i', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', 'l', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'x', '\n', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '{', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'\x7F', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '\x90', '\n', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', '\x98', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x9F', '\n', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\xA9', '\n', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', '\xB7', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\a', '\x10', '\xD1', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\xD4', 
		'\v', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', 
		'\xD9', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\xDC', '\v', '\x10', 
		'\x5', '\x10', '\xDE', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x6', '\x12', '\xE4', '\n', '\x12', '\r', '\x12', 
		'\xE', '\x12', '\xE5', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xF3', '\n', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\xFD', '\n', 
		'\x16', '\f', '\x16', '\xE', '\x16', '\x100', '\v', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\x103', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x10B', 
		'\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\a', '\x18', '\x113', '\n', '\x18', '\f', 
		'\x18', '\xE', '\x18', '\x116', '\v', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\x11F', '\n', '\x18', '\x5', '\x18', '\x121', '\n', '\x18', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x6', '\x19', '\x126', '\n', 
		'\x19', '\r', '\x19', '\xE', '\x19', '\x127', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', 
		'\x13A', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x5', '\x1A', '\x140', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x146', '\n', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x14F', '\n', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1E', '\a', '\x1E', '\x158', '\n', '\x1E', '\f', '\x1E', '\xE', 
		'\x1E', '\x15B', '\v', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x15E', 
		'\n', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x161', '\n', '\x1E', '\x3', 
		'\x1E', '\x5', '\x1E', '\x164', '\n', '\x1E', '\x3', '\x1E', '\x5', '\x1E', 
		'\x167', '\n', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x16A', '\n', '\x1E', 
		'\x3', '\x1E', '\x5', '\x1E', '\x16D', '\n', '\x1E', '\x3', '\x1F', '\x5', 
		'\x1F', '\x170', '\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x177', '\n', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x17B', '\n', '\x1F', '\x3', '\x1F', 
		'\a', '\x1F', '\x17E', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x181', 
		'\v', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x5', '!', '\x18A', '\n', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\a', '!', '\x18F', '\n', '!', '\f', '!', '\xE', '!', 
		'\x192', '\v', '!', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x5', '#', '\x199', '\n', '#', '\x3', '#', '\x3', '#', '\x5', 
		'#', '\x19D', '\n', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x6', '\'', '\x1AD', 
		'\n', '\'', '\r', '\'', '\xE', '\'', '\x1AE', '\x3', '(', '\x3', '(', 
		'\x6', '(', '\x1B3', '\n', '(', '\r', '(', '\xE', '(', '\x1B4', '\x3', 
		')', '\x3', ')', '\x6', ')', '\x1B9', '\n', ')', '\r', ')', '\xE', ')', 
		'\x1BA', '\x3', '*', '\x3', '*', '\x3', '*', '\a', '*', '\x1C0', '\n', 
		'*', '\f', '*', '\xE', '*', '\x1C3', '\v', '*', '\x3', '*', '\x3', '*', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', ',', '\a', ',', 
		'\x1CC', '\n', ',', '\f', ',', '\xE', ',', '\x1CF', '\v', ',', '\x3', 
		',', '\x4', '\x1C1', '\x1CD', '\x2', '-', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', 'T', 'V', '\x2', '\x6', '\x4', '\x2', ',', '\x31', 'L', 'L', 
		'\x5', '\x2', '\x17', '\x17', '\"', '\"', '<', '\x41', '\x5', '\x2', '&', 
		'&', '\x32', '\x32', 'J', 'L', '\x3', '\x2', '\x42', '\x45', '\x2', '\x1EB', 
		'\x2', 'X', '\x3', '\x2', '\x2', '\x2', '\x4', 'q', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x83', '\x3', '\x2', '\x2', '\x2', '\b', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\x91', '\x3', '\x2', '\x2', '\x2', '\f', '\xA0', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\xAE', '\x3', '\x2', '\x2', '\x2', '\x12', '\xB0', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\xBC', '\x3', '\x2', '\x2', '\x2', '\x16', '\xBE', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\xC4', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\xC6', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\xDD', '\x3', '\x2', '\x2', '\x2', ' ', '\xDF', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\xE1', '\x3', '\x2', '\x2', '\x2', 
		'$', '\xE7', '\x3', '\x2', '\x2', '\x2', '&', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '(', '\xF4', '\x3', '\x2', '\x2', '\x2', '*', '\x102', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x104', '\x3', '\x2', '\x2', '\x2', '.', '\x120', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x122', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x145', '\x3', '\x2', '\x2', '\x2', '\x34', '\x147', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x38', '\x154', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x159', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x16F', '\x3', '\x2', '\x2', '\x2', '>', '\x182', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x184', '\x3', '\x2', '\x2', '\x2', '\x42', '\x193', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x195', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x1A0', '\x3', '\x2', '\x2', '\x2', 'H', '\x1A2', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x1A5', '\x3', '\x2', '\x2', '\x2', 'L', '\x1AA', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x1B0', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x1B6', '\x3', '\x2', '\x2', '\x2', 'R', '\x1BC', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\x1C6', '\x3', '\x2', '\x2', '\x2', 'V', '\x1CD', 
		'\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\a', '#', '\x2', '\x2', 'Y', 'Z', 
		'\a', '\x33', '\x2', '\x2', 'Z', '^', '\a', '\x3', '\x2', '\x2', '[', 
		']', '\x5', '\x4', '\x3', '\x2', '\\', '[', '\x3', '\x2', '\x2', '\x2', 
		']', '`', '\x3', '\x2', '\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', 
		'\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', '_', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '\x61', '\x63', '\x5', 
		'\x36', '\x1C', '\x2', '\x62', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x66', '\x3', '\x2', '\x2', '\x2', '\x64', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '\x65', '\x3', '\x2', '\x2', '\x2', '\x65', 'j', '\x3', 
		'\x2', '\x2', '\x2', '\x66', '\x64', '\x3', '\x2', '\x2', '\x2', 'g', 
		'i', '\x5', 'T', '+', '\x2', 'h', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 
		'l', '\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'm', '\x3', '\x2', '\x2', '\x2', 
		'l', 'j', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\a', '$', '\x2', '\x2', 
		'n', 'o', '\a', '\x3', '\x2', '\x2', 'o', 'p', '\a', '\x2', '\x2', '\x3', 
		'p', '\x3', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\a', ')', '\x2', '\x2', 
		'r', 's', '\x5', '\x6', '\x4', '\x2', 's', 'w', '\a', '<', '\x2', '\x2', 
		't', 'x', '\x5', '\b', '\x5', '\x2', 'u', 'x', '\x5', '\x16', '\f', '\x2', 
		'v', 'x', '\x5', '\x1A', '\xE', '\x2', 'w', 't', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 'w', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'z', '\x3', '\x2', '\x2', '\x2', 'y', '{', '\a', '\x13', '\x2', 
		'\x2', 'z', 'y', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', '\x2', '\x2', 
		'\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', '|', '~', '\a', '\x3', '\x2', 
		'\x2', '}', '\x7F', '\x5', ' ', '\x11', '\x2', '~', '}', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\a', '*', '\x2', '\x2', '\x81', 
		'\x82', '\a', '\x3', '\x2', '\x2', '\x82', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x84', '\a', 'L', '\x2', '\x2', '\x84', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x85', '\x90', '\a', '\f', '\x2', '\x2', '\x86', '\x90', 
		'\a', '\r', '\x2', '\x2', '\x87', '\x90', '\a', '\xF', '\x2', '\x2', '\x88', 
		'\x90', '\a', '\x10', '\x2', '\x2', '\x89', '\x90', '\a', '\x14', '\x2', 
		'\x2', '\x8A', '\x90', '\a', '\x12', '\x2', '\x2', '\x8B', '\x90', '\x5', 
		'\n', '\x6', '\x2', '\x8C', '\x90', '\x5', '\xE', '\b', '\x2', '\x8D', 
		'\x90', '\x5', '\x12', '\n', '\x2', '\x8E', '\x90', '\a', 'L', '\x2', 
		'\x2', '\x8F', '\x85', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x87', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\t', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\a', 
		'\x11', '\x2', '\x2', '\x92', '\x93', '\a', '\x4', '\x2', '\x2', '\x93', 
		'\x94', '\a', '\x34', '\x2', '\x2', '\x94', '\x97', '\a', '\x39', '\x2', 
		'\x2', '\x95', '\x98', '\x5', '\f', '\a', '\x2', '\x96', '\x98', '\a', 
		'\x5', '\x2', '\x2', '\x97', '\x95', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x96', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x9A', '\a', '\x6', '\x2', '\x2', '\x9A', '\x9B', '\a', 
		'\x1F', '\x2', '\x2', '\x9B', '\x9E', '\x5', '\b', '\x5', '\x2', '\x9C', 
		'\x9D', '\a', '\x1C', '\x2', '\x2', '\x9D', '\x9F', '\a', 'L', '\x2', 
		'\x2', '\x9E', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\v', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\xA1', '\a', '\x34', '\x2', '\x2', '\xA1', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA3', '\a', '\xE', '\x2', '\x2', '\xA3', '\xA4', '\a', 
		'\x4', '\x2', '\x2', '\xA4', '\xA5', '\a', '\x34', '\x2', '\x2', '\xA5', 
		'\xA8', '\a', '\x39', '\x2', '\x2', '\xA6', '\xA9', '\x5', '\x10', '\t', 
		'\x2', '\xA7', '\xA9', '\a', '\x5', '\x2', '\x2', '\xA8', '\xA6', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\a', '\x6', '\x2', 
		'\x2', '\xAB', '\xAC', '\a', '\x1F', '\x2', '\x2', '\xAC', '\xAD', '\x5', 
		'\b', '\x5', '\x2', '\xAD', '\xF', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'\xAF', '\a', '\x34', '\x2', '\x2', '\xAF', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\xB0', '\xB1', '\a', '\x15', '\x2', '\x2', '\xB1', '\xB2', '\a', 
		'\x4', '\x2', '\x2', '\xB2', '\xB3', '\a', '\x34', '\x2', '\x2', '\xB3', 
		'\xB6', '\a', '\x39', '\x2', '\x2', '\xB4', '\xB7', '\x5', '\x14', '\v', 
		'\x2', '\xB5', '\xB7', '\a', '\x5', '\x2', '\x2', '\xB6', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\a', '\x6', '\x2', 
		'\x2', '\xB9', '\xBA', '\a', '\x1F', '\x2', '\x2', '\xBA', '\xBB', '\x5', 
		'\b', '\x5', '\x2', '\xBB', '\x13', '\x3', '\x2', '\x2', '\x2', '\xBC', 
		'\xBD', '\a', '\x34', '\x2', '\x2', '\xBD', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xBF', '\a', '\x1B', '\x2', '\x2', '\xBF', '\xC0', '\a', 
		'\x1F', '\x2', '\x2', '\xC0', '\xC1', '\a', '\x35', '\x2', '\x2', '\xC1', 
		'\xC2', '\x5', '\x18', '\r', '\x2', '\xC2', '\xC3', '\a', '\x36', '\x2', 
		'\x2', '\xC3', '\x17', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\x5', 
		'\x1E', '\x10', '\x2', '\xC5', '\x19', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xC7', '\a', '%', '\x2', '\x2', '\xC7', '\xC8', '\a', '\x35', '\x2', 
		'\x2', '\xC8', '\xC9', '\x5', '\x1C', '\xF', '\x2', '\xC9', '\xCA', '\a', 
		'\x36', '\x2', '\x2', '\xCA', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\xCC', '\x5', '\x1E', '\x10', '\x2', '\xCC', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xCD', '\xD2', '\a', 'L', '\x2', '\x2', '\xCE', '\xCF', '\a', 
		'\a', '\x2', '\x2', '\xCF', '\xD1', '\a', 'L', '\x2', '\x2', '\xD0', '\xCE', 
		'\x3', '\x2', '\x2', '\x2', '\xD1', '\xD4', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\xD3', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD2', 
		'\x3', '\x2', '\x2', '\x2', '\xD5', '\xDA', '\a', '\x32', '\x2', '\x2', 
		'\xD6', '\xD7', '\a', '\a', '\x2', '\x2', '\xD7', '\xD9', '\a', '\x32', 
		'\x2', '\x2', '\xD8', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDC', 
		'\x3', '\x2', '\x2', '\x2', '\xDA', '\xD8', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDE', '\x3', '\x2', 
		'\x2', '\x2', '\xDC', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xCD', 
		'\x3', '\x2', '\x2', '\x2', '\xDD', '\xD5', '\x3', '\x2', '\x2', '\x2', 
		'\xDE', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\x5', '\"', 
		'\x12', '\x2', '\xE0', '!', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE3', 
		'\a', '\b', '\x2', '\x2', '\xE2', '\xE4', '\x5', '$', '\x13', '\x2', '\xE3', 
		'\xE2', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '#', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xE8', '\a', 'L', '\x2', '\x2', '\xE8', '\xE9', '\a', '\x39', '\x2', 
		'\x2', '\xE9', '\xEA', '\x5', '&', '\x14', '\x2', '\xEA', '\xEB', '\a', 
		'\x3', '\x2', '\x2', '\xEB', '%', '\x3', '\x2', '\x2', '\x2', '\xEC', 
		'\xF3', '\x5', '(', '\x15', '\x2', '\xED', '\xF3', '\x5', '.', '\x18', 
		'\x2', '\xEE', '\xEF', '\a', '\x37', '\x2', '\x2', '\xEF', '\xF0', '\x5', 
		'.', '\x18', '\x2', '\xF0', '\xF1', '\a', '\x38', '\x2', '\x2', '\xF1', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xEC', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xED', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xEE', '\x3', 
		'\x2', '\x2', '\x2', '\xF3', '\'', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\xF5', '\t', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\a', '\x35', '\x2', 
		'\x2', '\xF6', '\xF7', '\x5', '*', '\x16', '\x2', '\xF7', '\xF8', '\a', 
		'\x36', '\x2', '\x2', '\xF8', ')', '\x3', '\x2', '\x2', '\x2', '\xF9', 
		'\xFE', '\x5', '\x32', '\x1A', '\x2', '\xFA', '\xFB', '\a', '\a', '\x2', 
		'\x2', '\xFB', '\xFD', '\x5', '\x32', '\x1A', '\x2', '\xFC', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\xFD', '\x100', '\x3', '\x2', '\x2', '\x2', '\xFE', 
		'\xFC', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', '\x2', '\x2', 
		'\x2', '\xFF', '\x103', '\x3', '\x2', '\x2', '\x2', '\x100', '\xFE', '\x3', 
		'\x2', '\x2', '\x2', '\x101', '\x103', '\x5', '\x30', '\x19', '\x2', '\x102', 
		'\xF9', '\x3', '\x2', '\x2', '\x2', '\x102', '\x101', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '+', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\a', 
		'L', '\x2', '\x2', '\x105', '\x10A', '\a', 'G', '\x2', '\x2', '\x106', 
		'\x10B', '\a', 'L', '\x2', '\x2', '\x107', '\x10B', '\a', 'J', '\x2', 
		'\x2', '\x108', '\x10B', '\a', 'K', '\x2', '\x2', '\x109', '\x10B', '\x5', 
		'(', '\x15', '\x2', '\x10A', '\x106', '\x3', '\x2', '\x2', '\x2', '\x10A', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x108', '\x3', '\x2', '\x2', 
		'\x2', '\x10A', '\x109', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', 
		'\x3', '\x2', '\x2', '\x2', '\x10C', '\x10D', '\a', ':', '\x2', '\x2', 
		'\x10D', '\x10E', '\x5', '.', '\x18', '\x2', '\x10E', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x10F', '\x114', '\x5', '\x32', '\x1A', '\x2', '\x110', 
		'\x111', '\t', '\x3', '\x2', '\x2', '\x111', '\x113', '\x5', '\x32', '\x1A', 
		'\x2', '\x112', '\x110', '\x3', '\x2', '\x2', '\x2', '\x113', '\x116', 
		'\x3', '\x2', '\x2', '\x2', '\x114', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x115', '\x3', '\x2', '\x2', '\x2', '\x115', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x114', '\x3', '\x2', '\x2', '\x2', '\x117', 
		'\x118', '\t', '\x4', '\x2', '\x2', '\x118', '\x11E', '\a', '\x1D', '\x2', 
		'\x2', '\x119', '\x11F', '\x5', '(', '\x15', '\x2', '\x11A', '\x11B', 
		'\a', '\x4', '\x2', '\x2', '\x11B', '\x11C', '\x5', '\x1E', '\x10', '\x2', 
		'\x11C', '\x11D', '\a', '\x6', '\x2', '\x2', '\x11D', '\x11F', '\x3', 
		'\x2', '\x2', '\x2', '\x11E', '\x119', '\x3', '\x2', '\x2', '\x2', '\x11E', 
		'\x11A', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x121', '\x3', '\x2', '\x2', 
		'\x2', '\x120', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x120', '\x117', 
		'\x3', '\x2', '\x2', '\x2', '\x121', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x122', '\x125', '\x5', '\x32', '\x1A', '\x2', '\x123', '\x124', '\t', 
		'\x5', '\x2', '\x2', '\x124', '\x126', '\x5', '\x32', '\x1A', '\x2', '\x125', 
		'\x123', '\x3', '\x2', '\x2', '\x2', '\x126', '\x127', '\x3', '\x2', '\x2', 
		'\x2', '\x127', '\x125', '\x3', '\x2', '\x2', '\x2', '\x127', '\x128', 
		'\x3', '\x2', '\x2', '\x2', '\x128', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x129', '\x146', '\a', '&', '\x2', '\x2', '\x12A', '\x146', '\a', '\x32', 
		'\x2', '\x2', '\x12B', '\x146', '\a', '\x34', '\x2', '\x2', '\x12C', '\x146', 
		'\a', 'H', '\x2', '\x2', '\x12D', '\x146', '\a', 'L', '\x2', '\x2', '\x12E', 
		'\x146', '\a', 'J', '\x2', '\x2', '\x12F', '\x146', '\a', 'K', '\x2', 
		'\x2', '\x130', '\x146', '\a', 'I', '\x2', '\x2', '\x131', '\x132', '\a', 
		'\x4', '\x2', '\x2', '\x132', '\x133', '\x5', '\x1E', '\x10', '\x2', '\x133', 
		'\x134', '\a', '\x6', '\x2', '\x2', '\x134', '\x146', '\x3', '\x2', '\x2', 
		'\x2', '\x135', '\x146', '\x5', ',', '\x17', '\x2', '\x136', '\x146', 
		'\x5', '(', '\x15', '\x2', '\x137', '\x139', '\a', '\x35', '\x2', '\x2', 
		'\x138', '\x13A', '\a', ';', '\x2', '\x2', '\x139', '\x138', '\x3', '\x2', 
		'\x2', '\x2', '\x139', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13B', 
		'\x3', '\x2', '\x2', '\x2', '\x13B', '\x13C', '\x5', '&', '\x14', '\x2', 
		'\x13C', '\x13D', '\a', '\x36', '\x2', '\x2', '\x13D', '\x146', '\x3', 
		'\x2', '\x2', '\x2', '\x13E', '\x140', '\a', ';', '\x2', '\x2', '\x13F', 
		'\x13E', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x140', '\x3', '\x2', '\x2', 
		'\x2', '\x140', '\x141', '\x3', '\x2', '\x2', '\x2', '\x141', '\x142', 
		'\a', '\x35', '\x2', '\x2', '\x142', '\x143', '\x5', '&', '\x14', '\x2', 
		'\x143', '\x144', '\a', '\x36', '\x2', '\x2', '\x144', '\x146', '\x3', 
		'\x2', '\x2', '\x2', '\x145', '\x129', '\x3', '\x2', '\x2', '\x2', '\x145', 
		'\x12A', '\x3', '\x2', '\x2', '\x2', '\x145', '\x12B', '\x3', '\x2', '\x2', 
		'\x2', '\x145', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x145', '\x12D', 
		'\x3', '\x2', '\x2', '\x2', '\x145', '\x12E', '\x3', '\x2', '\x2', '\x2', 
		'\x145', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x145', '\x130', '\x3', 
		'\x2', '\x2', '\x2', '\x145', '\x131', '\x3', '\x2', '\x2', '\x2', '\x145', 
		'\x135', '\x3', '\x2', '\x2', '\x2', '\x145', '\x136', '\x3', '\x2', '\x2', 
		'\x2', '\x145', '\x137', '\x3', '\x2', '\x2', '\x2', '\x145', '\x13F', 
		'\x3', '\x2', '\x2', '\x2', '\x146', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x147', '\x148', '\a', '&', '\x2', '\x2', '\x148', '\x149', '\a', '\t', 
		'\x2', '\x2', '\x149', '\x14A', '\a', 'L', '\x2', '\x2', '\x14A', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x14B', '\x14C', '\a', '\x19', '\x2', '\x2', 
		'\x14C', '\x14E', '\x5', '\x38', '\x1D', '\x2', '\x14D', '\x14F', '\a', 
		'\x3', '\x2', '\x2', '\x14E', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x14E', 
		'\x14F', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x150', '\x3', '\x2', '\x2', 
		'\x2', '\x150', '\x151', '\x5', ':', '\x1E', '\x2', '\x151', '\x152', 
		'\a', '\x1A', '\x2', '\x2', '\x152', '\x153', '\a', '\x3', '\x2', '\x2', 
		'\x153', '\x37', '\x3', '\x2', '\x2', '\x2', '\x154', '\x155', '\a', 'L', 
		'\x2', '\x2', '\x155', '\x39', '\x3', '\x2', '\x2', '\x2', '\x156', '\x158', 
		'\x5', '\x44', '#', '\x2', '\x157', '\x156', '\x3', '\x2', '\x2', '\x2', 
		'\x158', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x159', '\x157', '\x3', 
		'\x2', '\x2', '\x2', '\x159', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x15A', 
		'\x15D', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x159', '\x3', '\x2', '\x2', 
		'\x2', '\x15C', '\x15E', '\x5', '<', '\x1F', '\x2', '\x15D', '\x15C', 
		'\x3', '\x2', '\x2', '\x2', '\x15D', '\x15E', '\x3', '\x2', '\x2', '\x2', 
		'\x15E', '\x160', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x161', '\x5', 
		'@', '!', '\x2', '\x160', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x160', 
		'\x161', '\x3', '\x2', '\x2', '\x2', '\x161', '\x163', '\x3', '\x2', '\x2', 
		'\x2', '\x162', '\x164', '\x5', 'L', '\'', '\x2', '\x163', '\x162', '\x3', 
		'\x2', '\x2', '\x2', '\x163', '\x164', '\x3', '\x2', '\x2', '\x2', '\x164', 
		'\x166', '\x3', '\x2', '\x2', '\x2', '\x165', '\x167', '\x5', 'N', '(', 
		'\x2', '\x166', '\x165', '\x3', '\x2', '\x2', '\x2', '\x166', '\x167', 
		'\x3', '\x2', '\x2', '\x2', '\x167', '\x169', '\x3', '\x2', '\x2', '\x2', 
		'\x168', '\x16A', '\x5', '\"', '\x12', '\x2', '\x169', '\x168', '\x3', 
		'\x2', '\x2', '\x2', '\x169', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x16A', 
		'\x16C', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16D', '\x5', 'P', ')', 
		'\x2', '\x16C', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', 
		'\x3', '\x2', '\x2', '\x2', '\x16D', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x16E', '\x170', '\a', '\x16', '\x2', '\x2', '\x16F', '\x16E', '\x3', 
		'\x2', '\x2', '\x2', '\x16F', '\x170', '\x3', '\x2', '\x2', '\x2', '\x170', 
		'\x171', '\x3', '\x2', '\x2', '\x2', '\x171', '\x172', '\a', '(', '\x2', 
		'\x2', '\x172', '\x173', '\a', '\x1F', '\x2', '\x2', '\x173', '\x176', 
		'\a', '\x35', '\x2', '\x2', '\x174', '\x177', '\x5', 'J', '&', '\x2', 
		'\x175', '\x177', '\x5', '>', ' ', '\x2', '\x176', '\x174', '\x3', '\x2', 
		'\x2', '\x2', '\x176', '\x175', '\x3', '\x2', '\x2', '\x2', '\x177', '\x178', 
		'\x3', '\x2', '\x2', '\x2', '\x178', '\x17A', '\a', '\x36', '\x2', '\x2', 
		'\x179', '\x17B', '\a', '\x3', '\x2', '\x2', '\x17A', '\x179', '\x3', 
		'\x2', '\x2', '\x2', '\x17A', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x17B', 
		'\x17F', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17E', '\x5', '\x44', 
		'#', '\x2', '\x17D', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x181', 
		'\x3', '\x2', '\x2', '\x2', '\x17F', '\x17D', '\x3', '\x2', '\x2', '\x2', 
		'\x17F', '\x180', '\x3', '\x2', '\x2', '\x2', '\x180', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x181', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x182', '\x183', 
		'\a', 'L', '\x2', '\x2', '\x183', '?', '\x3', '\x2', '\x2', '\x2', '\x184', 
		'\x185', '\a', '\'', '\x2', '\x2', '\x185', '\x186', '\a', '\x1F', '\x2', 
		'\x2', '\x186', '\x189', '\a', '\x35', '\x2', '\x2', '\x187', '\x18A', 
		'\x5', 'J', '&', '\x2', '\x188', '\x18A', '\x5', '\x42', '\"', '\x2', 
		'\x189', '\x187', '\x3', '\x2', '\x2', '\x2', '\x189', '\x188', '\x3', 
		'\x2', '\x2', '\x2', '\x18A', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x18B', 
		'\x18C', '\a', '\x36', '\x2', '\x2', '\x18C', '\x190', '\a', '\x3', '\x2', 
		'\x2', '\x18D', '\x18F', '\x5', '\x44', '#', '\x2', '\x18E', '\x18D', 
		'\x3', '\x2', '\x2', '\x2', '\x18F', '\x192', '\x3', '\x2', '\x2', '\x2', 
		'\x190', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x190', '\x191', '\x3', 
		'\x2', '\x2', '\x2', '\x191', '\x41', '\x3', '\x2', '\x2', '\x2', '\x192', 
		'\x190', '\x3', '\x2', '\x2', '\x2', '\x193', '\x194', '\a', 'L', '\x2', 
		'\x2', '\x194', '\x43', '\x3', '\x2', '\x2', '\x2', '\x195', '\x196', 
		'\x5', '\x46', '$', '\x2', '\x196', '\x198', '\a', '\x39', '\x2', '\x2', 
		'\x197', '\x199', '\a', '!', '\x2', '\x2', '\x198', '\x197', '\x3', '\x2', 
		'\x2', '\x2', '\x198', '\x199', '\x3', '\x2', '\x2', '\x2', '\x199', '\x19A', 
		'\x3', '\x2', '\x2', '\x2', '\x19A', '\x19C', '\x5', '\b', '\x5', '\x2', 
		'\x19B', '\x19D', '\x5', 'H', '%', '\x2', '\x19C', '\x19B', '\x3', '\x2', 
		'\x2', '\x2', '\x19C', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19E', 
		'\x3', '\x2', '\x2', '\x2', '\x19E', '\x19F', '\a', '\x3', '\x2', '\x2', 
		'\x19F', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A1', '\a', 'L', 
		'\x2', '\x2', '\x1A1', 'G', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A3', 
		'\a', '\x46', '\x2', '\x2', '\x1A3', '\x1A4', '\x5', '&', '\x14', '\x2', 
		'\x1A4', 'I', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A6', '\a', ' ', 
		'\x2', '\x2', '\x1A6', '\x1A7', '\a', '\x35', '\x2', '\x2', '\x1A7', '\x1A8', 
		'\x5', '\x1E', '\x10', '\x2', '\x1A8', '\x1A9', '\a', '\x36', '\x2', '\x2', 
		'\x1A9', 'K', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1AC', '\a', '\x1E', 
		'\x2', '\x2', '\x1AB', '\x1AD', '\x5', '\x44', '#', '\x2', '\x1AC', '\x1AB', 
		'\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AE', '\x3', '\x2', '\x2', '\x2', 
		'\x1AE', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AF', '\x3', 
		'\x2', '\x2', '\x2', '\x1AF', 'M', '\x3', '\x2', '\x2', '\x2', '\x1B0', 
		'\x1B2', '\a', '\x18', '\x2', '\x2', '\x1B1', '\x1B3', '\x5', '\x44', 
		'#', '\x2', '\x1B2', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B4', 
		'\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B2', '\x3', '\x2', '\x2', '\x2', 
		'\x1B4', '\x1B5', '\x3', '\x2', '\x2', '\x2', '\x1B5', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x1B6', '\x1B8', '\a', '+', '\x2', '\x2', '\x1B7', '\x1B9', 
		'\x5', 'R', '*', '\x2', '\x1B8', '\x1B7', '\x3', '\x2', '\x2', '\x2', 
		'\x1B9', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1B8', '\x3', 
		'\x2', '\x2', '\x2', '\x1BA', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1BB', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BD', '\a', 'L', '\x2', '\x2', 
		'\x1BD', '\x1C1', '\a', '\x39', '\x2', '\x2', '\x1BE', '\x1C0', '\v', 
		'\x2', '\x2', '\x2', '\x1BF', '\x1BE', '\x3', '\x2', '\x2', '\x2', '\x1C0', 
		'\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C2', '\x3', '\x2', '\x2', 
		'\x2', '\x1C1', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C4', 
		'\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C1', '\x3', '\x2', '\x2', '\x2', 
		'\x1C4', '\x1C5', '\a', '\x3', '\x2', '\x2', '\x1C5', 'S', '\x3', '\x2', 
		'\x2', '\x2', '\x1C6', '\x1C7', '\a', '\n', '\x2', '\x2', '\x1C7', '\x1C8', 
		'\x5', 'V', ',', '\x2', '\x1C8', '\x1C9', '\a', '\v', '\x2', '\x2', '\x1C9', 
		'U', '\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1CC', '\v', '\x2', '\x2', 
		'\x2', '\x1CB', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1CF', 
		'\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1CE', '\x3', '\x2', '\x2', '\x2', 
		'\x1CD', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1CE', 'W', '\x3', '\x2', 
		'\x2', '\x2', '\x1CF', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x31', '^', 
		'\x64', 'j', 'w', 'z', '~', '\x8F', '\x97', '\x9E', '\xA8', '\xB6', '\xD2', 
		'\xDA', '\xDD', '\xE5', '\xF2', '\xFE', '\x102', '\x10A', '\x114', '\x11E', 
		'\x120', '\x127', '\x139', '\x13F', '\x145', '\x14E', '\x159', '\x15D', 
		'\x160', '\x163', '\x166', '\x169', '\x16C', '\x16F', '\x176', '\x17A', 
		'\x17F', '\x189', '\x190', '\x198', '\x19C', '\x1AE', '\x1B4', '\x1BA', 
		'\x1C1', '\x1CD',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Express
