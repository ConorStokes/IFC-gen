using System;
using System.Collections.Generic;
using System.Reflection;
using System.IO;
using System.Linq;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Tree;

namespace IFC.Generate
{
	class Program
	{
		static void Main(string[] args)
		{
			using (FileStream fs = new FileStream(args[0], FileMode.Open))
			{
				var input = new AntlrInputStream(fs);
				var lexer = new Express.ExpressLexer(input);
				var tokens = new CommonTokenStream(lexer);

				var parser = new Express.ExpressParser(tokens);
				parser.BuildParseTree = true;

				var tree = parser.schemaDeclaration();
				var walker = new ParseTreeWalker();
				var listener = new Express.ExpressListener();
				walker.Walk(listener, tree);

				var sb = new StringBuilder();
				foreach(var t in listener.Types)
				{
					sb.Append(t.ToString());
				}
				foreach(var c in listener.Entities)
				{
					sb.Append(c.ToString());
				}
				var types = 
$@"/*
This code was generated by a tool. DO NOT MODIFY this code manually, unless you really know what you are doing.
 */
using System;
				
namespace IFC4
{{
{sb.ToString()}
}}";
				File.WriteAllText("IFC.Types.cs",types);

				var tokenStr = new StringBuilder();
				foreach(var t in tokens.GetTokens())
				{
					tokenStr.AppendLine(t.ToString());
				}
				File.WriteAllText("tokens.txt",tokenStr.ToString());
			}
			
		}
	}
}
