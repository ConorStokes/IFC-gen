//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./ANTLR/Express.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Express {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class ExpressParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, BOOLEAN=20, ENUMERATION=21, FIXED=22, INTEGER=23, 
		LOGICAL=24, REAL=25, STRING_FIXED=26, STRING=27, Integer=28, LP=29, RP=30, 
		Float=31, EnumIdentifier=32, Identifier=33, WS=34, Newline=35, Comments=36;
	public const int
		RULE_schema_declaration = 0, RULE_type_declaration = 1, RULE_value_type = 2, 
		RULE_enumeration = 3, RULE_id_list = 4, RULE_enum_id_list = 5, RULE_type_declaration_body = 6, 
		RULE_where_declaration = 7, RULE_where_statement = 8, RULE_entity_declaration = 9, 
		RULE_entity_declaration_body = 10, RULE_subtype_declaration = 11, RULE_one_of = 12, 
		RULE_supertype_declaration = 13, RULE_inverse_declaration = 14, RULE_inverse_statement = 15, 
		RULE_unique_declaration = 16, RULE_unique_statement = 17, RULE_function_declaration = 18, 
		RULE_function_declaration_body = 19;
	public static readonly string[] ruleNames = {
		"schema_declaration", "type_declaration", "value_type", "enumeration", 
		"id_list", "enum_id_list", "type_declaration_body", "where_declaration", 
		"where_statement", "entity_declaration", "entity_declaration_body", "subtype_declaration", 
		"one_of", "supertype_declaration", "inverse_declaration", "inverse_statement", 
		"unique_declaration", "unique_statement", "function_declaration", "function_declaration_body"
	};

	private static readonly string[] _LiteralNames = {
		null, "'SCHEMA IFC'", "';'", "'END_SCHEMA;'", "'TYPE'", "'='", "'END_TYPE;'", 
		"','", "'WHERE'", "':'", "'ENTITY'", "'END_ENTITY;'", "'SUBTYPE OF'", 
		"'ONE OF'", "'ABSTRACT'", "'SUPERTYPE OF'", "'INVERSE'", "'UNIQUE'", "'FUNCTION'", 
		"'END_FUNCTION'", "'BOOLEAN'", "'ENUMERATION OF'", "'FIXED'", "'INTEGER'", 
		"'LOGICAL'", "'REAL'", null, "'STRING'", null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "BOOLEAN", "ENUMERATION", 
		"FIXED", "INTEGER", "LOGICAL", "REAL", "STRING_FIXED", "STRING", "Integer", 
		"LP", "RP", "Float", "EnumIdentifier", "Identifier", "WS", "Newline", 
		"Comments"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Express.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExpressParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExpressParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExpressParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class Schema_declarationContext : ParserRuleContext {
		public ITerminalNode Integer() { return GetToken(ExpressParser.Integer, 0); }
		public ITerminalNode Eof() { return GetToken(ExpressParser.Eof, 0); }
		public Type_declarationContext[] type_declaration() {
			return GetRuleContexts<Type_declarationContext>();
		}
		public Type_declarationContext type_declaration(int i) {
			return GetRuleContext<Type_declarationContext>(i);
		}
		public Entity_declarationContext[] entity_declaration() {
			return GetRuleContexts<Entity_declarationContext>();
		}
		public Entity_declarationContext entity_declaration(int i) {
			return GetRuleContext<Entity_declarationContext>(i);
		}
		public Function_declarationContext[] function_declaration() {
			return GetRuleContexts<Function_declarationContext>();
		}
		public Function_declarationContext function_declaration(int i) {
			return GetRuleContext<Function_declarationContext>(i);
		}
		public Schema_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSchema_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSchema_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Schema_declarationContext schema_declaration() {
		Schema_declarationContext _localctx = new Schema_declarationContext(Context, State);
		EnterRule(_localctx, 0, RULE_schema_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(T__0);
			State = 41; Match(Integer);
			State = 42; Match(T__1);
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 43; type_declaration();
				}
				}
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 49; entity_declaration();
				}
				}
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__17) {
				{
				{
				State = 55; function_declaration();
				}
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 61; Match(T__2);
			State = 62; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declarationContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public Value_typeContext value_type() {
			return GetRuleContext<Value_typeContext>(0);
		}
		public EnumerationContext enumeration() {
			return GetRuleContext<EnumerationContext>(0);
		}
		public Type_declaration_bodyContext type_declaration_body() {
			return GetRuleContext<Type_declaration_bodyContext>(0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterType_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitType_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Type_declarationContext type_declaration() {
		Type_declarationContext _localctx = new Type_declarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_type_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; Match(T__3);
			State = 65; Match(Identifier);
			State = 66; Match(T__4);
			State = 69;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case FIXED:
			case INTEGER:
			case LOGICAL:
			case REAL:
			case STRING_FIXED:
			case STRING:
				{
				State = 67; value_type();
				}
				break;
			case ENUMERATION:
				{
				State = 68; enumeration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 71; Match(T__1);
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 72; type_declaration_body();
				}
			}

			State = 75; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_typeContext : ParserRuleContext {
		public ITerminalNode BOOLEAN() { return GetToken(ExpressParser.BOOLEAN, 0); }
		public ITerminalNode FIXED() { return GetToken(ExpressParser.FIXED, 0); }
		public ITerminalNode INTEGER() { return GetToken(ExpressParser.INTEGER, 0); }
		public ITerminalNode LOGICAL() { return GetToken(ExpressParser.LOGICAL, 0); }
		public ITerminalNode REAL() { return GetToken(ExpressParser.REAL, 0); }
		public ITerminalNode STRING() { return GetToken(ExpressParser.STRING, 0); }
		public ITerminalNode STRING_FIXED() { return GetToken(ExpressParser.STRING_FIXED, 0); }
		public Value_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterValue_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitValue_type(this);
		}
	}

	[RuleVersion(0)]
	public Value_typeContext value_type() {
		Value_typeContext _localctx = new Value_typeContext(Context, State);
		EnterRule(_localctx, 4, RULE_value_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << FIXED) | (1L << INTEGER) | (1L << LOGICAL) | (1L << REAL) | (1L << STRING_FIXED) | (1L << STRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationContext : ParserRuleContext {
		public ITerminalNode ENUMERATION() { return GetToken(ExpressParser.ENUMERATION, 0); }
		public ITerminalNode LP() { return GetToken(ExpressParser.LP, 0); }
		public Enum_id_listContext enum_id_list() {
			return GetRuleContext<Enum_id_listContext>(0);
		}
		public ITerminalNode RP() { return GetToken(ExpressParser.RP, 0); }
		public EnumerationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterEnumeration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitEnumeration(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationContext enumeration() {
		EnumerationContext _localctx = new EnumerationContext(Context, State);
		EnterRule(_localctx, 6, RULE_enumeration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; Match(ENUMERATION);
			State = 80; Match(LP);
			State = 81; enum_id_list();
			State = 82; Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_listContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(ExpressParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(ExpressParser.Identifier, i);
		}
		public Id_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterId_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitId_list(this);
		}
	}

	[RuleVersion(0)]
	public Id_listContext id_list() {
		Id_listContext _localctx = new Id_listContext(Context, State);
		EnterRule(_localctx, 8, RULE_id_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; Match(Identifier);
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 85; Match(T__6);
				State = 86; Match(Identifier);
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_id_listContext : ParserRuleContext {
		public ITerminalNode[] EnumIdentifier() { return GetTokens(ExpressParser.EnumIdentifier); }
		public ITerminalNode EnumIdentifier(int i) {
			return GetToken(ExpressParser.EnumIdentifier, i);
		}
		public Enum_id_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_id_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterEnum_id_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitEnum_id_list(this);
		}
	}

	[RuleVersion(0)]
	public Enum_id_listContext enum_id_list() {
		Enum_id_listContext _localctx = new Enum_id_listContext(Context, State);
		EnterRule(_localctx, 10, RULE_enum_id_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; Match(EnumIdentifier);
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 93; Match(T__6);
				State = 94; Match(EnumIdentifier);
				}
				}
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declaration_bodyContext : ParserRuleContext {
		public Where_declarationContext where_declaration() {
			return GetRuleContext<Where_declarationContext>(0);
		}
		public Type_declaration_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterType_declaration_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitType_declaration_body(this);
		}
	}

	[RuleVersion(0)]
	public Type_declaration_bodyContext type_declaration_body() {
		Type_declaration_bodyContext _localctx = new Type_declaration_bodyContext(Context, State);
		EnterRule(_localctx, 12, RULE_type_declaration_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; where_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_declarationContext : ParserRuleContext {
		public Where_statementContext[] where_statement() {
			return GetRuleContexts<Where_statementContext>();
		}
		public Where_statementContext where_statement(int i) {
			return GetRuleContext<Where_statementContext>(i);
		}
		public Where_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterWhere_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitWhere_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Where_declarationContext where_declaration() {
		Where_declarationContext _localctx = new Where_declarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_where_declaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(T__7);
			State = 104;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 103; where_statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 106;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_statementContext : ParserRuleContext {
		public Where_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterWhere_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitWhere_statement(this);
		}
	}

	[RuleVersion(0)]
	public Where_statementContext where_statement() {
		Where_statementContext _localctx = new Where_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_where_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 108;
					MatchWildcard();
					}
					} 
				}
				State = 113;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			State = 114; Match(T__8);
			State = 118;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 115;
					MatchWildcard();
					}
					} 
				}
				State = 120;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 121; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_declarationContext : ParserRuleContext {
		public Entity_declaration_bodyContext entity_declaration_body() {
			return GetRuleContext<Entity_declaration_bodyContext>(0);
		}
		public Entity_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterEntity_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitEntity_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Entity_declarationContext entity_declaration() {
		Entity_declarationContext _localctx = new Entity_declarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_entity_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; Match(T__9);
			State = 124; entity_declaration_body();
			State = 125; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_declaration_bodyContext : ParserRuleContext {
		public Subtype_declarationContext subtype_declaration() {
			return GetRuleContext<Subtype_declarationContext>(0);
		}
		public Supertype_declarationContext supertype_declaration() {
			return GetRuleContext<Supertype_declarationContext>(0);
		}
		public Inverse_declarationContext inverse_declaration() {
			return GetRuleContext<Inverse_declarationContext>(0);
		}
		public Where_declarationContext where_declaration() {
			return GetRuleContext<Where_declarationContext>(0);
		}
		public Unique_declarationContext unique_declaration() {
			return GetRuleContext<Unique_declarationContext>(0);
		}
		public Entity_declaration_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_declaration_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterEntity_declaration_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitEntity_declaration_body(this);
		}
	}

	[RuleVersion(0)]
	public Entity_declaration_bodyContext entity_declaration_body() {
		Entity_declaration_bodyContext _localctx = new Entity_declaration_bodyContext(Context, State);
		EnterRule(_localctx, 20, RULE_entity_declaration_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 127; subtype_declaration();
				}
			}

			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13 || _la==T__14) {
				{
				State = 130; supertype_declaration();
				}
			}

			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 133; inverse_declaration();
				}
			}

			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 136; where_declaration();
				}
			}

			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 139; unique_declaration();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subtype_declarationContext : ParserRuleContext {
		public ITerminalNode[] RP() { return GetTokens(ExpressParser.RP); }
		public ITerminalNode RP(int i) {
			return GetToken(ExpressParser.RP, i);
		}
		public One_ofContext one_of() {
			return GetRuleContext<One_ofContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public Subtype_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtype_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSubtype_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSubtype_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Subtype_declarationContext subtype_declaration() {
		Subtype_declarationContext _localctx = new Subtype_declarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_subtype_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(T__11);
			State = 143; Match(RP);
			State = 146;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
				{
				State = 144; one_of();
				}
				break;
			case Identifier:
				{
				State = 145; Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 148; Match(RP);
			State = 149; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class One_ofContext : ParserRuleContext {
		public ITerminalNode LP() { return GetToken(ExpressParser.LP, 0); }
		public Id_listContext id_list() {
			return GetRuleContext<Id_listContext>(0);
		}
		public ITerminalNode RP() { return GetToken(ExpressParser.RP, 0); }
		public One_ofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_one_of; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterOne_of(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitOne_of(this);
		}
	}

	[RuleVersion(0)]
	public One_ofContext one_of() {
		One_ofContext _localctx = new One_ofContext(Context, State);
		EnterRule(_localctx, 24, RULE_one_of);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; Match(T__12);
			State = 152; Match(LP);
			State = 153; id_list();
			State = 154; Match(RP);
			State = 155; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Supertype_declarationContext : ParserRuleContext {
		public ITerminalNode LP() { return GetToken(ExpressParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(ExpressParser.RP, 0); }
		public One_ofContext one_of() {
			return GetRuleContext<One_ofContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public Supertype_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supertype_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSupertype_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSupertype_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Supertype_declarationContext supertype_declaration() {
		Supertype_declarationContext _localctx = new Supertype_declarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_supertype_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 157; Match(T__13);
				}
			}

			State = 160; Match(T__14);
			State = 161; Match(LP);
			State = 164;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
				{
				State = 162; one_of();
				}
				break;
			case Identifier:
				{
				State = 163; Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 166; Match(RP);
			State = 167; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inverse_declarationContext : ParserRuleContext {
		public Inverse_statementContext[] inverse_statement() {
			return GetRuleContexts<Inverse_statementContext>();
		}
		public Inverse_statementContext inverse_statement(int i) {
			return GetRuleContext<Inverse_statementContext>(i);
		}
		public Inverse_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inverse_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterInverse_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitInverse_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Inverse_declarationContext inverse_declaration() {
		Inverse_declarationContext _localctx = new Inverse_declarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_inverse_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; Match(T__15);
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 170; inverse_statement();
				}
				}
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inverse_statementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public Inverse_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inverse_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterInverse_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitInverse_statement(this);
		}
	}

	[RuleVersion(0)]
	public Inverse_statementContext inverse_statement() {
		Inverse_statementContext _localctx = new Inverse_statementContext(Context, State);
		EnterRule(_localctx, 30, RULE_inverse_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; Match(Identifier);
			State = 176; Match(T__8);
			State = 180;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 177;
					MatchWildcard();
					}
					} 
				}
				State = 182;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			State = 183; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unique_declarationContext : ParserRuleContext {
		public Unique_statementContext[] unique_statement() {
			return GetRuleContexts<Unique_statementContext>();
		}
		public Unique_statementContext unique_statement(int i) {
			return GetRuleContext<Unique_statementContext>(i);
		}
		public Unique_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unique_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterUnique_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitUnique_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Unique_declarationContext unique_declaration() {
		Unique_declarationContext _localctx = new Unique_declarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_unique_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; Match(T__16);
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 186; unique_statement();
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unique_statementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(ExpressParser.Identifier, 0); }
		public Unique_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unique_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterUnique_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitUnique_statement(this);
		}
	}

	[RuleVersion(0)]
	public Unique_statementContext unique_statement() {
		Unique_statementContext _localctx = new Unique_statementContext(Context, State);
		EnterRule(_localctx, 34, RULE_unique_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(Identifier);
			State = 192; Match(T__8);
			State = 196;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 193;
					MatchWildcard();
					}
					} 
				}
				State = 198;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			State = 199; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declarationContext : ParserRuleContext {
		public Function_declaration_bodyContext function_declaration_body() {
			return GetRuleContext<Function_declaration_bodyContext>(0);
		}
		public Function_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterFunction_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitFunction_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Function_declarationContext function_declaration() {
		Function_declarationContext _localctx = new Function_declarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_function_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; Match(T__17);
			State = 202; function_declaration_body();
			State = 203; Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declaration_bodyContext : ParserRuleContext {
		public Function_declaration_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_declaration_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterFunction_declaration_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitFunction_declaration_body(this);
		}
	}

	[RuleVersion(0)]
	public Function_declaration_bodyContext function_declaration_body() {
		Function_declaration_bodyContext _localctx = new Function_declaration_bodyContext(Context, State);
		EnterRule(_localctx, 38, RULE_function_declaration_body);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 205;
					MatchWildcard();
					}
					} 
				}
				State = 210;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '&', '\xD6', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '/', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '\x32', '\v', '\x2', '\x3', '\x2', '\a', 
		'\x2', '\x35', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x38', '\v', '\x2', 
		'\x3', '\x2', '\a', '\x2', ';', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'>', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'H', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'L', '\n', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'Z', '\n', '\x6', '\f', 
		'\x6', '\xE', '\x6', ']', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\a', '\a', '\x62', '\n', '\a', '\f', '\a', '\xE', '\a', '\x65', 
		'\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x6', 
		'\t', 'k', '\n', '\t', '\r', '\t', '\xE', '\t', 'l', '\x3', '\n', '\a', 
		'\n', 'p', '\n', '\n', '\f', '\n', '\xE', '\n', 's', '\v', '\n', '\x3', 
		'\n', '\x3', '\n', '\a', '\n', 'w', '\n', '\n', '\f', '\n', '\xE', '\n', 
		'z', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x5', '\f', '\x83', '\n', '\f', '\x3', 
		'\f', '\x5', '\f', '\x86', '\n', '\f', '\x3', '\f', '\x5', '\f', '\x89', 
		'\n', '\f', '\x3', '\f', '\x5', '\f', '\x8C', '\n', '\f', '\x3', '\f', 
		'\x5', '\f', '\x8F', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x5', '\r', '\x95', '\n', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xF', '\x5', '\xF', '\xA1', '\n', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\xA7', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x6', '\x10', '\xAE', '\n', '\x10', '\r', '\x10', 
		'\xE', '\x10', '\xAF', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', 
		'\x11', '\xB5', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xB8', '\v', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x6', 
		'\x12', '\xBE', '\n', '\x12', '\r', '\x12', '\xE', '\x12', '\xBF', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\xC5', '\n', '\x13', 
		'\f', '\x13', '\xE', '\x13', '\xC8', '\v', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\a', '\x15', '\xD1', '\n', '\x15', '\f', '\x15', '\xE', '\x15', 
		'\xD4', '\v', '\x15', '\x3', '\x15', '\a', 'q', 'x', '\xB6', '\xC6', '\xD2', 
		'\x2', '\x16', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'\x2', '\x3', '\x4', '\x2', '\x16', '\x16', '\x18', '\x1D', '\x2', '\xD8', 
		'\x2', '*', '\x3', '\x2', '\x2', '\x2', '\x4', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\x6', 'O', '\x3', '\x2', '\x2', '\x2', '\b', 'Q', '\x3', '\x2', 
		'\x2', '\x2', '\n', 'V', '\x3', '\x2', '\x2', '\x2', '\f', '^', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x66', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'h', '\x3', '\x2', '\x2', '\x2', '\x12', 'q', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '}', '\x3', '\x2', '\x2', '\x2', '\x16', '\x82', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x90', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x99', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xA0', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xAB', '\x3', '\x2', '\x2', '\x2', ' ', '\xB1', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\xBB', '\x3', '\x2', '\x2', '\x2', '$', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '&', '\xCB', '\x3', '\x2', '\x2', '\x2', '(', '\xD2', 
		'\x3', '\x2', '\x2', '\x2', '*', '+', '\a', '\x3', '\x2', '\x2', '+', 
		',', '\a', '\x1E', '\x2', '\x2', ',', '\x30', '\a', '\x4', '\x2', '\x2', 
		'-', '/', '\x5', '\x4', '\x3', '\x2', '.', '-', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x32', '\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x31', '\x3', '\x2', '\x2', '\x2', '\x31', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x30', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x35', '\x5', '\x14', '\v', '\x2', '\x34', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x38', '\x3', '\x2', '\x2', '\x2', '\x36', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'<', '\x3', '\x2', '\x2', '\x2', '\x38', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ';', '\x5', '&', '\x14', '\x2', ':', '\x39', '\x3', '\x2', 
		'\x2', '\x2', ';', '>', '\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', 
		'\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', '=', '?', '\x3', '\x2', 
		'\x2', '\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', '?', '@', '\a', '\x5', 
		'\x2', '\x2', '@', '\x41', '\a', '\x2', '\x2', '\x3', '\x41', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x43', '\a', '\x6', '\x2', '\x2', '\x43', 
		'\x44', '\a', '#', '\x2', '\x2', '\x44', 'G', '\a', '\a', '\x2', '\x2', 
		'\x45', 'H', '\x5', '\x6', '\x4', '\x2', '\x46', 'H', '\x5', '\b', '\x5', 
		'\x2', 'G', '\x45', '\x3', '\x2', '\x2', '\x2', 'G', '\x46', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 'K', '\a', '\x4', 
		'\x2', '\x2', 'J', 'L', '\x5', '\xE', '\b', '\x2', 'K', 'J', '\x3', '\x2', 
		'\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'N', '\a', '\b', '\x2', '\x2', 'N', '\x5', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'P', '\t', '\x2', '\x2', '\x2', 'P', '\a', '\x3', '\x2', 
		'\x2', '\x2', 'Q', 'R', '\a', '\x17', '\x2', '\x2', 'R', 'S', '\a', '\x1F', 
		'\x2', '\x2', 'S', 'T', '\x5', '\f', '\a', '\x2', 'T', 'U', '\a', ' ', 
		'\x2', '\x2', 'U', '\t', '\x3', '\x2', '\x2', '\x2', 'V', '[', '\a', '#', 
		'\x2', '\x2', 'W', 'X', '\a', '\t', '\x2', '\x2', 'X', 'Z', '\a', '#', 
		'\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Z', ']', '\x3', '\x2', 
		'\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', 
		'\x2', '\x2', '\x2', '\\', '\v', '\x3', '\x2', '\x2', '\x2', ']', '[', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x63', '\a', '\"', '\x2', '\x2', '_', 
		'`', '\a', '\t', '\x2', '\x2', '`', '\x62', '\a', '\"', '\x2', '\x2', 
		'\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x62', '\x65', '\x3', '\x2', 
		'\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x5', '\x10', 
		'\t', '\x2', 'g', '\xF', '\x3', '\x2', '\x2', '\x2', 'h', 'j', '\a', '\n', 
		'\x2', '\x2', 'i', 'k', '\x5', '\x12', '\n', '\x2', 'j', 'i', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', 'j', '\x3', '\x2', 
		'\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 'm', '\x11', '\x3', 
		'\x2', '\x2', '\x2', 'n', 'p', '\v', '\x2', '\x2', '\x2', 'o', 'n', '\x3', 
		'\x2', '\x2', '\x2', 'p', 's', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\x3', 
		'\x2', '\x2', '\x2', 'q', 'o', '\x3', '\x2', '\x2', '\x2', 'r', 't', '\x3', 
		'\x2', '\x2', '\x2', 's', 'q', '\x3', '\x2', '\x2', '\x2', 't', 'x', '\a', 
		'\v', '\x2', '\x2', 'u', 'w', '\v', '\x2', '\x2', '\x2', 'v', 'u', '\x3', 
		'\x2', '\x2', '\x2', 'w', 'z', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', 
		'\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 'y', '{', '\x3', 
		'\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', '\x2', '\x2', '{', '|', '\a', 
		'\x4', '\x2', '\x2', '|', '\x13', '\x3', '\x2', '\x2', '\x2', '}', '~', 
		'\a', '\f', '\x2', '\x2', '~', '\x7F', '\x5', '\x16', '\f', '\x2', '\x7F', 
		'\x80', '\a', '\r', '\x2', '\x2', '\x80', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x83', '\x5', '\x18', '\r', '\x2', '\x82', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x82', '\x83', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x84', '\x86', '\x5', '\x1C', '\xF', 
		'\x2', '\x85', '\x84', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x86', '\x88', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\x89', '\x5', '\x1E', '\x10', '\x2', '\x88', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '\x89', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x8C', '\x5', '\x10', '\t', '\x2', '\x8B', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8F', '\x5', 
		'\"', '\x12', '\x2', '\x8E', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\x91', '\a', '\xE', '\x2', '\x2', '\x91', '\x94', '\a', 
		' ', '\x2', '\x2', '\x92', '\x95', '\x5', '\x1A', '\xE', '\x2', '\x93', 
		'\x95', '\a', '#', '\x2', '\x2', '\x94', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x93', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x97', '\a', ' ', '\x2', '\x2', '\x97', 
		'\x98', '\a', '\x4', '\x2', '\x2', '\x98', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x9A', '\a', '\xF', '\x2', '\x2', '\x9A', '\x9B', '\a', 
		'\x1F', '\x2', '\x2', '\x9B', '\x9C', '\x5', '\n', '\x6', '\x2', '\x9C', 
		'\x9D', '\a', ' ', '\x2', '\x2', '\x9D', '\x9E', '\a', '\x4', '\x2', '\x2', 
		'\x9E', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA1', '\a', '\x10', 
		'\x2', '\x2', '\xA0', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', 
		'\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\xA3', '\a', '\x11', '\x2', '\x2', '\xA3', '\xA6', '\a', '\x1F', 
		'\x2', '\x2', '\xA4', '\xA7', '\x5', '\x1A', '\xE', '\x2', '\xA5', '\xA7', 
		'\a', '#', '\x2', '\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\xA8', '\xA9', '\a', ' ', '\x2', '\x2', '\xA9', '\xAA', '\a', 
		'\x4', '\x2', '\x2', '\xAA', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xAD', '\a', '\x12', '\x2', '\x2', '\xAC', '\xAE', '\x5', ' ', '\x11', 
		'\x2', '\xAD', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAF', 
		'\xB0', '\x3', '\x2', '\x2', '\x2', '\xB0', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xB2', '\a', '#', '\x2', '\x2', '\xB2', '\xB6', '\a', 
		'\v', '\x2', '\x2', '\xB3', '\xB5', '\v', '\x2', '\x2', '\x2', '\xB4', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB8', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xB8', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\a', '\x4', '\x2', 
		'\x2', '\xBA', '!', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBD', '\a', 
		'\x13', '\x2', '\x2', '\xBC', '\xBE', '\x5', '$', '\x13', '\x2', '\xBD', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '#', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xC2', '\a', '#', '\x2', '\x2', '\xC2', '\xC6', '\a', '\v', '\x2', '\x2', 
		'\xC3', '\xC5', '\v', '\x2', '\x2', '\x2', '\xC4', '\xC3', '\x3', '\x2', 
		'\x2', '\x2', '\xC5', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '\xC4', '\x3', '\x2', '\x2', '\x2', 
		'\xC7', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC6', '\x3', '\x2', 
		'\x2', '\x2', '\xC9', '\xCA', '\a', '\x4', '\x2', '\x2', '\xCA', '%', 
		'\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\a', '\x14', '\x2', '\x2', 
		'\xCC', '\xCD', '\x5', '(', '\x15', '\x2', '\xCD', '\xCE', '\a', '\x15', 
		'\x2', '\x2', '\xCE', '\'', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD1', 
		'\v', '\x2', '\x2', '\x2', '\xD0', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\xD1', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD3', ')', 
		'\x3', '\x2', '\x2', '\x2', '\xD4', '\xD2', '\x3', '\x2', '\x2', '\x2', 
		'\x19', '\x30', '\x36', '<', 'G', 'K', '[', '\x63', 'l', 'q', 'x', '\x82', 
		'\x85', '\x88', '\x8B', '\x8E', '\x94', '\xA0', '\xA6', '\xAF', '\xB6', 
		'\xBF', '\xC6', '\xD2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Express
